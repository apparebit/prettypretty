from collections.abc import Iterator
from typing import Self

from . import Color

class DefaultColor:
    """The default foreground or background color."""
    Foreground: DefaultColor = ...
    Background: DefaultColor = ...

    def name(self) -> str: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...


class AnsiColor:
    """
    The 16 extended ANSI colors.

    The ANSI color comprise eight base colors and their eight bright versions.
    Unlike most other colors, the ANSI colors have no intrinsic color values and
    hence are abstract colors. At the same time, they do have semantics.
    """
    Black: AnsiColor = ...
    Red: AnsiColor = ...
    Green: AnsiColor = ...
    Yellow: AnsiColor = ...
    Blue: AnsiColor = ...
    Magenta: AnsiColor = ...
    Cyan: AnsiColor = ...
    White: AnsiColor = ...
    BrightBlack: AnsiColor = ...
    BrightRed: AnsiColor = ...
    BrightGreen: AnsiColor = ...
    BrightYellow: AnsiColor = ...
    BrightBlue: AnsiColor = ...
    BrightMagenta: AnsiColor = ...
    BrightCyan: AnsiColor = ...
    BrightWhite: AnsiColor = ...

    @staticmethod
    def try_from_8bit(value: int) -> AnsiColor: ...
    def to_8bit(self) -> int: ...
    def is_achromatic(self) -> bool: ...
    def is_bright(self) -> bool: ...
    def to_3bit(self) -> AnsiColor: ...
    def name(self) -> str: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...


class EmbeddedRgb:
    """The 6x6x6 RGB cube embedded in 8-bit color."""
    def __new__(cls, r: int, g: int, b:int) -> Self: ...
    @staticmethod
    def try_from_8bit(value: int) -> EmbeddedRgb: ...
    def to_8bit(self) -> int: ...
    def to_24bit(self) -> list[int]: ...
    def to_color(self) -> Color: ...
    def coordinates(self) -> list[int]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class GrayGradient:
    """The 24-step gray gradient embedded in 8-bit color."""
    def __new__(cls, value: int) -> Self: ...
    @staticmethod
    def try_from_8bit(value: int) -> GrayGradient: ...
    def to_8bit(self) -> int: ...
    def to_24bit(self) -> list[int]: ...
    def to_color(self) -> Color: ...
    def level(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class TrueColor:
    """24-bit RGB colors."""
    def __new__(cls, r: int, g: int, b: int) -> Self: ...
    @staticmethod
    def from_color(color: Color) -> TrueColor: ...
    def to_color(self) -> Color: ...
    def coordinates(self) -> list[int]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> int: ...
    def weighted_euclidian_distance(self, other: TrueColor) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...


class TerminalColor_Default(TerminalColor):
    """The default foreground and background colors."""
    def __new__(cls, color: DefaultColor) -> Self: ...
    @property
    def color(self) -> DefaultColor: ...


class TerminalColor_Ansi(TerminalColor):
    """The 16 extended ANSI colors."""
    def __new__(cls, color: AnsiColor) -> Self: ...
    @property
    def color(self) -> AnsiColor: ...


class TerminalColor_Embedded(TerminalColor):
    """The 6x6x6 RGB cube embedded in 8-bit colors."""
    def __new__(cls, color: EmbeddedRgb) -> Self: ...
    @property
    def color(self) -> EmbeddedRgb: ...


class TerminalColor_Gray(TerminalColor):
    """The gray gradient embedded in 8-bit colors."""
    def __new__(cls, color: GrayGradient) -> Self: ...
    @property
    def color(self) -> GrayGradient: ...


class TerminalColor_Bits24(TerminalColor):
    """24-bit RGB colors."""
    def __new__(cls, color: TrueColor) -> Self: ...
    @property
    def color(self) -> TrueColor: ...


class TerminalColor:
    """Terminal colors."""
    Default = TerminalColor_Default
    Ansi = TerminalColor_Ansi
    Embedded = TerminalColor_Embedded
    Gray = TerminalColor_Gray
    Bits24 = TerminalColor_Bits24

    @staticmethod
    def from_8bit(color: int) -> TerminalColor: ...
    @staticmethod
    def from_24bit(r: int, g: int, b: int) -> TerminalColor: ...
    @staticmethod
    def from_color(color: Color) -> TerminalColor: ...
    def try_to_8bit(self) -> int: ...
    def try_to_24bit(self) -> list[int]: ...
    def is_default(self) -> bool: ...
    def sgr_parameters(self, layer: Layer) -> list[int]: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class Fidelity:
    """
    Levels of support for ANSI escape codes and colors.
    """
    Plain: Fidelity = ...
    NoColor: Fidelity = ...
    Ansi: Fidelity = ...
    EightBit: Fidelity = ...
    Full: Fidelity = ...

    @staticmethod
    def from_color(color: TerminalColor) -> Fidelity: ...
    @staticmethod
    def from_environment(has_tty: bool) -> Fidelity: ...

    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __str__(self) -> str: ...


class Layer:
    """The render layer."""
    Foreground: Layer = ...
    Background: Layer = ...

    def offset(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __str__(self) -> str: ...


class Format:
    """Text formats other than color."""
    Bold: Format = ...
    Thin: Format = ...
    Italic: Format = ...
    Underlined: Format = ...
    Blinking: Format = ...
    Reversed: Format = ...
    Hidden: Format = ...
    Stricken: Format = ...
    NotBoldOrThin: Format = ...
    NotItalic: Format = ...
    NotUnderlined: Format = ...
    NotBlinking: Format = ...
    NotReversed: Format = ...
    NotHidden: Format = ...
    NotStricken: Format = ...

    @staticmethod
    def all() -> AllFormats: ...

    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...


class AllFormats:
    """An iterator over all formats."""
    def drain(self) -> None: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> Format: ...


class Formatting:
    """Terminal formatting."""
    def __new__(cls) -> Self: ...
    def bold(self) -> Self: ...
    def thin(self) -> Self: ...
    def italic(self) -> Self: ...
    def underlined(self) -> Self: ...
    def blinking(self) -> Self: ...
    def reversed(self) -> Self: ...
    def hidden(self) -> Self: ...
    def stricken(self) -> Self: ...
    def has(self, format: Format) -> bool: ...
    def formats(self) -> Iterator[Format]: ...
    def __invert__(self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...


class Style_Reset(Style):
    def __new__(cls) -> Self: ...


class Style_Text(Style):
    def __new__(cls, formatting: Formatting) -> Self: ...


class Style_Foreground(Style):
    def __new__(cls, foreground: TerminalColor) -> Self: ...


class Style_Background(Style):
    def __new__(cls, background: TerminalColor) -> Self: ...


class Style:
    """The enum of all terminal styles."""
    Reset = Style_Reset
    Text = Style_Text
    Foreground = Style_Foreground
    Background = Style_Background


class RichText:
    def fidelity(self) -> Fidelity: ...
    #def styles(self) -> Iterator[Style]: ...
    def text(self) -> str: ...
