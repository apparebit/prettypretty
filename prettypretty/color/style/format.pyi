from collections.abc import Iterator
from typing import ClassVar, Self

from . import Fidelity


class Attribute:
    """Text attributes other than color."""
    Bold: ClassVar[Attribute] = ...
    Thin: ClassVar[Attribute] = ...
    Italic: ClassVar[Attribute] = ...
    Underlined: ClassVar[Attribute] = ...
    Blinking: ClassVar[Attribute] = ...
    Reversed: ClassVar[Attribute] = ...
    Hidden: ClassVar[Attribute] = ...
    Stricken: ClassVar[Attribute] = ...
    NotBoldOrThin: ClassVar[Attribute] = ...
    NotItalic: ClassVar[Attribute] = ...
    NotUnderlined: ClassVar[Attribute] = ...
    NotBlinking: ClassVar[Attribute] = ...
    NotReversed: ClassVar[Attribute] = ...
    NotHidden: ClassVar[Attribute] = ...
    NotStricken: ClassVar[Attribute] = ...

    @staticmethod
    def all() -> AllAttributes: ...

    def sgr_parameter(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...


class AllAttributes:
    """An iterator over all attributes."""
    def drain(self) -> None: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> Attribute: ...


class Format:
    """Terminal formatting."""
    def __new__(cls) -> Self: ...
    def bold(self) -> Self: ...
    def thin(self) -> Self: ...
    def italic(self) -> Self: ...
    def underlined(self) -> Self: ...
    def blinking(self) -> Self: ...
    def reversed(self) -> Self: ...
    def hidden(self) -> Self: ...
    def stricken(self) -> Self: ...
    def has(self, attr: Attribute) -> bool: ...
    def attributes(self) -> Iterator[Attribute]: ...
    def cap(self, fidelity: Fidelity) -> None | Self: ...
    def sgr_parameters(self) -> list[int]: ...
    def __invert__(self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
