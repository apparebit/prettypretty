from typing import ClassVar, Literal, Self

from .format import Format
from .. import Color
from ..trans import Translator


class AnsiColor:
    """
    The 16 extended ANSI colors.

    The ANSI color comprise eight base colors and their eight bright versions.
    Unlike most other colors, the ANSI colors have no intrinsic color values and
    hence are abstract colors. At the same time, they do have semantics.
    """
    Black: ClassVar[AnsiColor] = ...
    Red: ClassVar[AnsiColor] = ...
    Green: ClassVar[AnsiColor] = ...
    Yellow: ClassVar[AnsiColor] = ...
    Blue: ClassVar[AnsiColor] = ...
    Magenta: ClassVar[AnsiColor] = ...
    Cyan: ClassVar[AnsiColor] = ...
    White: ClassVar[AnsiColor] = ...
    BrightBlack: ClassVar[AnsiColor] = ...
    BrightRed: ClassVar[AnsiColor] = ...
    BrightGreen: ClassVar[AnsiColor] = ...
    BrightYellow: ClassVar[AnsiColor] = ...
    BrightBlue: ClassVar[AnsiColor] = ...
    BrightMagenta: ClassVar[AnsiColor] = ...
    BrightCyan: ClassVar[AnsiColor] = ...
    BrightWhite: ClassVar[AnsiColor] = ...

    @staticmethod
    def all() -> AnsiColorIterator: ...
    @staticmethod
    def try_from_8bit(value: int) -> AnsiColor: ...
    def to_8bit(self) -> int: ...
    def is_achromatic(self) -> bool: ...
    def is_bright(self) -> bool: ...
    def to_3bit(self) -> AnsiColor: ...
    def name(self) -> str: ...
    def abbr(self) -> str: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class AnsiColorIterator:
    """An iterator over all ANSI colors."""
    def __len__(self) -> int: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> AnsiColor: ...


class EmbeddedRgb:
    """The 6x6x6 RGB cube embedded in 8-bit color."""
    def __new__(cls, r: int, g: int, b:int) -> Self: ...
    @staticmethod
    def try_from_8bit(value: int) -> EmbeddedRgb: ...
    def to_8bit(self) -> int: ...
    def to_24bit(self) -> list[int]: ...
    def to_color(self) -> Color: ...
    def coordinates(self) -> list[int]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class GrayGradient:
    """The 24-step gray gradient embedded in 8-bit color."""
    def __new__(cls, value: int) -> Self: ...
    @staticmethod
    def try_from_8bit(value: int) -> GrayGradient: ...
    def to_8bit(self) -> int: ...
    def to_24bit(self) -> list[int]: ...
    def to_color(self) -> Color: ...
    def level(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class EightBitColor_Ansi(EightBitColor):
    """The ANSI colors."""
    def __new__(cls, color: AnsiColor) -> Self: ...
    def __getitem__(self, index: Literal[0]) -> AnsiColor: ...


class EightBitColor_Embedded(EightBitColor):
    """The embedded RGB colors."""
    def __new__(cls, color: EmbeddedRgb) -> Self: ...
    def __getitem__(self, index: Literal[0]) -> EmbeddedRgb: ...


class EightBitColor_Gray(EightBitColor):
    """The gray gradient colors."""
    def __new__(cls, color: GrayGradient) -> Self: ...
    def __getitem__(self, index: Literal[0]) -> GrayGradient: ...


class EightBitColor:
    """The 8-bit colors."""
    Ansi = EightBitColor_Ansi
    Embedded = EightBitColor_Embedded
    Gray = EightBitColor_Gray

    @staticmethod
    def from_8bit(byte: int) -> EightBitColor: ...

    def to_8bit(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class TrueColor:
    """24-bit RGB colors."""
    def __new__(cls, r: int, g: int, b: int) -> TrueColor: ...
    @staticmethod
    def from_color(color: Color) -> TrueColor: ...
    def to_color(self) -> Color: ...
    def coordinates(self) -> list[int]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> int: ...
    def weighted_euclidian_distance(self, other: TrueColor) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...


class Colorant_Default(Colorant):
    """The default color."""
    def __new__(cls) -> Self: ...


class Colorant_Ansi(Colorant):
    """The ANSI colors."""
    def __new__(cls, color: AnsiColor) -> Self: ...
    def __getitem__(self, index: Literal[0]) -> AnsiColor: ...


class Colorant_Embedded(Colorant):
    """The embedded RGB colors."""
    def __new__(cls, color: EmbeddedRgb) -> Self: ...
    def __getitem__(self, index: Literal[0]) -> EmbeddedRgb: ...


class Colorant_Gray(Colorant):
    """The gray gradient colors."""
    def __new__(cls, color: GrayGradient) -> Self: ...
    def __getitem__(self, index: Literal[0]) -> GrayGradient: ...


class Colorant_Rgb(Colorant):
    """The 24bit colors."""
    def __new__(cls, color: TrueColor) -> Self: ...
    def __getitem__(self, index: Literal[0]) -> TrueColor: ...


class Colorant_HiRes(Colorant):
    """The high-resolution colors."""
    def __new__(cls, color: Color) -> Self: ...
    def __getitem__(self, index: Literal[0]) -> Color: ...


class Colorant:
    """A wrapper for all color representations."""
    Default = Colorant_Default
    Ansi = Colorant_Ansi
    Embedded = Colorant_Embedded
    Gray = Colorant_Gray
    Rgb = Colorant_Rgb
    HiRes = Colorant_HiRes

    @staticmethod
    def of(
        colorant: (
            int | AnsiColor | EmbeddedRgb | GrayGradient | EightBitColor | TrueColor
            | Color | Colorant
        )
    ) -> Colorant: ...

    def try_to_8bit(self) -> int: ...
    def try_to_24bit(self) -> tuple[int, int, int]: ...
    def is_default(self) -> bool: ...
    def sgr_parameter_count(self) -> None | int: ...
    def sgr_parameters(self, layer: Layer) -> None | list[int]: ...
    def __invert__(self) -> None | Colorant: ...
    def __getitem__(
        self, index: Literal[0]
    ) -> AnsiColor | EmbeddedRgb | GrayGradient | TrueColor | Color: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class Fidelity:
    """
    Levels of support for ANSI escape codes and colors.
    """
    Plain: ClassVar[Fidelity] = ...
    NoColor: ClassVar[Fidelity] = ...
    Ansi: ClassVar[Fidelity] = ...
    EightBit: ClassVar[Fidelity] = ...
    TwentyFourBit: ClassVar[Fidelity] = ...
    HiRes: ClassVar[Fidelity] = ...

    @staticmethod
    def from_color(
        color: (
            int | AnsiColor | EmbeddedRgb | GrayGradient | EightBitColor | TrueColor
            | Color | Colorant
        )
    ) -> Fidelity: ...
    @staticmethod
    def from_environment(has_tty: bool) -> Fidelity: ...

    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


class Layer:
    """The render layer."""
    Foreground: ClassVar[Layer] = ...
    Background: ClassVar[Layer] = ...

    def is_foreground(self) -> bool: ...
    def is_background(self) -> bool: ...
    def offset(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...


def stylist() -> Stylist: ...
    # Create a new, empty style builder for fluently assembling styles.


class Stylist:
    """A builder for fluently assembling styles."""
    @staticmethod
    def with_reset() -> Stylist: ...

    def __new__(cls) -> Self: ...
    def bold(self) -> Self: ...
    def thin(self) -> Self: ...
    def italic(self) -> Self: ...
    def underlined(self) -> Self: ...
    def blinking(self) -> Self: ...
    def reversed(self) -> Self: ...
    def hidden(self) -> Self: ...
    def stricken(self) -> Self: ...
    def embedded_rgb_fg(self, r: int, g: int, b: int) -> Self: ...
    def gray_fg(self, level: int) -> Self: ...
    def rgb_fg(self, r: int, g: int, b: int) -> Self: ...
    def fg(
        self,
        color: (
            int | AnsiColor | EmbeddedRgb | GrayGradient | EightBitColor | TrueColor
            | Color | Colorant
        ),
    ) -> Self: ...
    def foreground(
        self,
        color: (
            int | AnsiColor | EmbeddedRgb | GrayGradient | EightBitColor | TrueColor
            | Color | Colorant
        ),
    ) -> Self: ...
    def embedded_rgb_bg(self, r: int, g: int, b: int) -> Self: ...
    def gray_bg(self, level: int) -> Self: ...
    def rgb_bg(self, r: int, g: int, b: int) -> Self: ...
    def bg(
        self,
        color: (
            int | AnsiColor | EmbeddedRgb | GrayGradient | EightBitColor | TrueColor
            | Color | Colorant
        ),
    ) -> Self: ...
    def background(
        self,
        color: (
            int | AnsiColor | EmbeddedRgb | GrayGradient | EightBitColor | TrueColor
            | Color | Colorant
        ),
    ) -> Self: ...
    def et_voila(self) -> Style: ...
    def build(self) -> Style: ...
    def __repr__(self) -> str: ...


class Style:
    """A style."""
    @staticmethod
    def builder() -> Stylist: ...

    def is_empty(self) -> bool: ...
    def has_reset(self) -> bool: ...
    def format(self) -> None | Format: ...
    def has_color(self) -> bool: ...
    def foreground(self) -> None | Colorant: ...
    def background(self) -> None | Colorant: ...
    def fidelity(self) -> Fidelity: ...
    def cap(self, fidelity: Fidelity, translator: Translator) -> Self: ...
    def sgr_parameter_count(self) -> None | int: ...
    def sgr_parameters(self) -> list[int]: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __invert__(self) -> Self: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
