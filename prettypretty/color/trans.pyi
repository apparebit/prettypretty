from collections.abc import Iterator, Sequence
from typing import ClassVar, Self

from . import Color, OkVersion
from .style import (
    AnsiColor, Colorant, EmbeddedRgb, Fidelity, GrayGradient, Layer, TrueColor
)

VGA_COLORS: list[Color] =  ...


class ThemeEntry_DefaultForeground(ThemeEntry):
    """A theme entry for one of the default colors."""
    def __new__(cls) -> Self: ...


class ThemeEntry_DefaultBackground(ThemeEntry):
    """A theme entry for one of the default colors."""
    def __new__(cls) -> Self: ...


class ThemeEntry_Ansi(ThemeEntry):
    """A theme entry for one of the ANSI colors."""
    def __new__(cls, color: AnsiColor) -> Self: ...


class ThemeEntry:
    """The 18 colors in a theme."""
    DefaultForeground: ClassVar[type[ThemeEntry]] = ThemeEntry_DefaultForeground
    DefaultBackground: ClassVar[type[ThemeEntry]] = ThemeEntry_DefaultBackground
    Ansi: ClassVar[type[ThemeEntry]] = ThemeEntry_Ansi

    @staticmethod
    def try_from_index(index: int) -> ThemeEntry: ...
    def name(self) -> str: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...


class Translator:
    """A class for translating between terminal and high-resolution colors."""
    @staticmethod
    def theme_entries() -> Iterator[ThemeEntry]: ...
    def __new__(cls, version: OkVersion, theme_colors: Sequence[Color]) -> Self: ...
    def __repr__(self) -> str: ...

    # Interrogate the color theme
    def is_dark_theme(self) -> bool: ...

    # Translate terminal to high-resolution colors
    def resolve(
        self,
        color: int | AnsiColor | EmbeddedRgb | GrayGradient | TrueColor | Color | Colorant,
    ) -> Color: ...
    def resolve_all(
        self,
        color: int | AnsiColor | EmbeddedRgb | GrayGradient | TrueColor | Color | Colorant,
        layer: Layer,
    ) -> Color: ...

    # Translate high-resolution to ANSI colors
    def to_ansi(self, color: Color) -> Color: ...
    def supports_hue_lightness(self) -> bool: ...
    def to_ansi_hue_lightness(self, color: Color) -> None | AnsiColor: ...
    def to_closest_ansi(self, color: Color) -> AnsiColor: ...
    def to_ansi_rgb(self, color: Color) -> AnsiColor: ...

    # Translate high-resolution to 8-bit colors
    def to_closest_8bit(self, color: Color) -> Colorant: ...
    def to_closest_8bit_with_ansi(self, color: Color) -> Colorant: ...

    # Cap terminal colors
    def cap(
        self,
        color: int | AnsiColor | EmbeddedRgb | GrayGradient | TrueColor | Color | Colorant,
        fidelity: Fidelity,
    ) -> None | Colorant: ...
