from collections.abc import Iterator, Sequence
from typing import Self

from . import Color, OkVersion, style


VGA_COLORS: list[Color] =  ...


class ThemeEntry_Default(ThemeEntry):
    """A theme entry for one of the default colors."""
    def __new__(cls, color: style.DefaultColor) -> Self: ...


class ThemeEntry_Ansi(ThemeEntry):
    """A theme entry for one of the ANSI colors."""
    def __new__(cls, color: style.AnsiColor) -> Self: ...


class ThemeEntry:
    """The 18 colors in a theme."""
    Default = ThemeEntry_Default
    Ansi = ThemeEntry_Ansi

    @staticmethod
    def try_from_index(index: int) -> ThemeEntry: ...
    def name(self) -> str: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...


class Translator:
    """A class for translating between terminal and high-resolution colors."""
    @staticmethod
    def theme_entries() -> Iterator[ThemeEntry]: ...
    def __new__(cls, version: OkVersion, theme_colors: Sequence[Color]) -> Self: ...
    def __repr__(self) -> str: ...

    # Interrogate the color theme
    def is_dark_theme(self) -> bool: ...

    # Translate terminal to high-resolution colors
    def resolve(
        self,
        color: (
            style.TerminalColor | style.DefaultColor | style.AnsiColor | style.EmbeddedRgb
            | style.GrayGradient | style.TrueColor | int
        ),
    ) -> Color: ...

    # Translate high-resolution to ANSI colors
    def to_ansi(self, color: Color) -> Color: ...
    def supports_hue_lightness(self) -> bool: ...
    def to_ansi_hue_lightness(self, color: Color) -> None | style.AnsiColor: ...
    def to_closest_ansi(self, color: Color) -> style.AnsiColor: ...
    def to_ansi_rgb(self, color: Color) -> style.AnsiColor: ...

    # Translate high-resolution to 8-bit colors
    def to_closest_8bit(self, color: Color) -> style.TerminalColor: ...
    def to_closest_8bit_with_ansi(self, color: Color) -> style.TerminalColor: ...

    # Cap terminal colors
    def cap(
        self,
        color: (
            style.TerminalColor | style.DefaultColor | style.AnsiColor | style.EmbeddedRgb
            | style.GrayGradient | style.TrueColor | int
        ),
        fidelity: style.Fidelity
    ) -> None | style.TerminalColor: ...
