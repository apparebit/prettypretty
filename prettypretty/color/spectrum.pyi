from collections.abc import Iterator


class Illuminant:
    """A standard illuminant."""
    def label(self) -> str: ...
    def is_empty(self) -> bool: ...
    def start(self) -> int: ...
    def end(self) -> int: ...
    def __iter__(self) -> Iterator[float]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> float: ...
    def __repr__(self) -> str: ...


class Observer:
    """A standard observer, that is, a color matching function."""
    def label(self) -> str: ...
    def is_empty(self) -> bool: ...
    def start(self) -> int: ...
    def end(self) -> int: ...
    def weight(self) -> float: ...
    def __iter__(self) -> Iterator[list[float]]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> list[float]: ...
    def __repr__(self) -> str: ...


def sum_luminance(observer: Observer) -> float:
    """Compute luminance of observer as sum of all second component items."""


CIE_ILLUMINANT_D65: Illuminant
CIE_OBSERVER_2DEG_1931: Observer
CIE_OBSERVER_2DEG_2015: Observer
