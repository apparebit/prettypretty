//! The spectral distributions for CIE standard observers and illuminants.
//!
//!   * [`Illuminant`] and [`Observer`] define a simple **interface to data**
//!     from the corresponding spectral distributions at 1nm resolution.
//!   * [`CIE_ILLUMINANT_D65`], [`CIE_OBSERVER_2DEG_1931`], and
//!     [`CIE_OBSERVER_2DEG_2015`] provide the **actual data** for several **CIE
//!     standard distributions**.
//!   * [`SpectrumTraversal`] delineates the boundaries of the **visual gamut**
//!     by computes an observer's tristimulus values for square wave pulses.
//!   * [`std_observer::x()`], [`std_observer::y()`], and [`std_observer::z()`]
//!     compute **analytical approximations** for the CIE's 1931 2ยบ **standard
//!     observer**.

#[cfg(feature = "pyffi")]
use pyo3::prelude::*;

use crate::{
    core::{Accumulator, GamutTraversalStep},
    Color, ColorSpace, Float,
};

// PyO3 doesn't bridge generic types including individual instances. It does,
// however, bridge types generated by macros, which is largely equivalent.

macro_rules! declare_spectrum_distribution {
    ($name:ident<$item_type:ty>, $dist_type:ty) => {
        /// A spectral distribution with one-nanometer resolution.
        #[cfg_attr(feature = "pyffi", pyclass(module = "prettypretty.color.spectrum"))]
        #[derive(Debug)]
        pub struct $name {
            label: &'static str,
            start: usize,
            data: &'static [$item_type],
        }

        #[cfg_attr(feature = "pyffi", pymethods)]
        impl $name {
            /// Get the label.
            pub fn label(&self) -> &'static str {
                self.label
            }

            /// Determine whether this spectral distribution is empty.
            pub fn is_empty(&self) -> bool {
                self.data.len() == 0
            }

            /// Get the smallest wavelength in nanometers of this spectral
            /// distribution.
            pub fn start(&self) -> usize {
                self.start
            }

            /// Get the one after the largest wavelength in nanometers of this
            /// spectral distribution.
            pub fn end(&self) -> usize {
                self.start + self.data.len()
            }

            /// Get the number of entries in this spectral distribution.
            pub fn len(&self) -> usize {
                self.data.len()
            }

            /// Determine the wavelength overlap between the two distributions.
            pub fn overlap(&self, other: &$dist_type) -> (usize, usize) {
                let start = self.start().max(other.start());
                let end = self.end().min(other.end());
                (start, end)
            }

            /// Look up the value of this spectral distribution for the given
            /// wavelength.
            ///
            /// This method returns `None` if the wavelength is out of range for
            /// this spectral distribution. When combining data from more than
            /// one spectral distribution, use of this method ensures that all
            /// distributions actually have values at given wavelengths.
            pub fn at(&self, wavelength: usize) -> Option<$item_type> {
                if self.start <= wavelength && wavelength < self.start + self.data.len() {
                    Some(self.data[wavelength - self.start])
                } else {
                    None
                }
            }

            /// Get the number of entries. <i class=python-only>Python only!</i>
            #[cfg(feature = "pyffi")]
            pub fn __len__(&self) -> usize {
                self.data.len()
            }

            /// Get the entry at the given index. <i class=python-only>Python
            /// only!</i>
            #[cfg(feature = "pyffi")]
            pub fn __getitem__(&self, index: usize) -> PyResult<$item_type> {
                if index < self.data.len() {
                    Ok(self.data[index])
                } else {
                    Err(pyo3::exceptions::PyIndexError::new_err(format!(
                        "len {} <= index {} into {}",
                        self.data.len(),
                        index,
                        self.label,
                    )))
                }
            }

            /// Get a debug representation. <i class=python-only>Python
            /// only!</i>
            #[cfg(feature = "pyffi")]
            pub fn __repr__(&self) -> String {
                format!(
                    "{}(\"{}\", {}:{})",
                    stringify!($name),
                    self.label,
                    self.start,
                    self.end()
                )
            }
        }

        impl std::ops::Index<usize> for $name {
            type Output = $item_type;

            fn index(&self, index: usize) -> &Self::Output {
                &self.data[index]
            }
        }
    };
}

declare_spectrum_distribution!(Observer<[Float; 3]>, Illuminant);
declare_spectrum_distribution!(Illuminant<Float>, Observer);

// --------------------------------------------------------------------------------------------------------------------

pub mod std_observer {
    //! Free-standing functions related to the CIE standard observer.

    #[cfg(feature = "pyffi")]
    use pyo3::prelude::pyfunction;

    use crate::Float;

    /// Compute an [analytical
    /// approximation](https://research.nvidia.com/publication/2013-07_simple-analytic-approximations-cie-xyz-color-matching-functions)
    /// for the 1931 2ยบ standard observer's x.
    #[cfg_attr(feature = "pyffi", pyfunction)]
    pub fn x(wavelength: Float) -> Float {
        let p1 = (wavelength - 442.0) * (if wavelength < 442.0 { 0.0624 } else { 0.0374 });
        let p2 = (wavelength - 599.8) * (if wavelength < 599.8 { 0.0264 } else { 0.0323 });
        let p3 = (wavelength - 501.1) * (if wavelength < 501.1 { 0.0490 } else { 0.0382 });

        0.362 * (-0.5 * p1 * p1).exp() + 1.056 * (-0.5 * p2 * p2).exp()
            - 0.065 * (-0.5 * p3 * p3).exp()
    }

    /// Compute an [analytical
    /// approximation](https://research.nvidia.com/publication/2013-07_simple-analytic-approximations-cie-xyz-color-matching-functions)
    /// for the 1931 2ยบ standard observer's y.
    #[cfg_attr(feature = "pyffi", pyfunction)]
    pub fn y(wavelength: Float) -> Float {
        let p1 = (wavelength - 568.8) * (if wavelength < 568.8 { 0.0213 } else { 0.0247 });
        let p2 = (wavelength - 530.9) * (if wavelength < 530.9 { 0.0613 } else { 0.0322 });
        0.821 * (-0.5 * p1 * p1).exp() + 0.286 * (-0.5 * p2 * p2).exp()
    }

    /// Compute an [analytical
    /// approximation](https://research.nvidia.com/publication/2013-07_simple-analytic-approximations-cie-xyz-color-matching-functions)
    /// for the 1931 2ยบ standard observer's z.
    #[cfg_attr(feature = "pyffi", pyfunction)]
    pub fn z(wavelength: Float) -> Float {
        let p1 = (wavelength - 437.0) * (if wavelength < 437.0 { 0.0845 } else { 0.0278 });
        let p2 = (wavelength - 459.0) * (if wavelength < 459.0 { 0.0385 } else { 0.0725 });
        1.217 * (-0.5 * p1 * p1).exp() + 0.681 * (-0.5 * p2 * p2).exp()
    }
}

// --------------------------------------------------------------------------------------------------------------------

/// The data for a spectrum traversal.
///
/// This struct stores the spectral distribution resulting from pre-multiplying
/// the illuminant and observer and then computing the sum totals. It exists to
/// ensures that the data is not mutated by accident. Like the rest of the
/// module, this struct assumes one-nanometer resolution.
#[derive(Debug, Default)]
struct SpectrumTraversalData {
    premultiplied: Vec<[Float; 3]>,
    total_xyz: [Float; 3],
}

impl SpectrumTraversalData {
    /// Create the spectrum traversal data for the observer and illuminant.
    fn new(illuminant: &Illuminant, observer: &Observer) -> Self {
        let (start, end) = illuminant.overlap(observer);
        let mut premultiplied: Vec<[Float; 3]> = Vec::with_capacity(end - start);

        for index in start..end {
            let [x, y, z] = observer.at(index).unwrap();
            let s = illuminant.at(index).unwrap() / 100.0;
            let ys = y * s;
            premultiplied.push([x * s, ys, z * s]);
        }

        let mut data = Self {
            premultiplied,
            total_xyz: [0.0, 0.0, 0.0],
        };
        data.total_xyz = data.pulse(0, end - start);

        data
    }

    fn len(&self) -> usize {
        self.premultiplied.len()
    }

    fn total(&self) -> [Float; 3] {
        self.total_xyz
    }

    fn pulse(&self, start: usize, width: usize) -> [Float; 3] {
        let mut xs = Accumulator::default();
        let mut ys = Accumulator::default();
        let mut zs = Accumulator::default();

        for index in start..start + width {
            let index = index % self.premultiplied.len();
            let [x, y, z] = self.premultiplied[index];
            xs += x;
            ys += y;
            zs += z;
        }

        [xs.total(), ys.total(), zs.total()]
    }

    fn color_pulse(&self, start: usize, width: usize) -> Color {
        let [x, y, z] = self.pulse(start, width);
        let luminosity = self.total_xyz[1];

        Color::new(
            ColorSpace::Xyz,
            [x / luminosity, y / luminosity, z / luminosity],
        )
    }
}

/// An iterator to delineate the visual gamut.
///
/// This iterator traverses the boundaries of the visual gamut by computing an
/// observer's tristimulus values under a given illuminant [for square wave
/// pulses](https://horizon-lab.org/colorvis/gamutvis.html) of [increasing
/// widths](https://www.russellcottrell.com/photo/visualGamut.htm).
///
/// Every traversal of a square wave pulse across the spectrum is represented as
/// a line of colors in the XYZ color space. The first pulse is always 1nm wide
/// and hence the first line always always is the spectral locus for the given
/// illuminant and observer.
#[cfg_attr(feature = "pyffi", pyclass(module = "prettypretty.color.spectrum"))]
#[derive(Debug)]
pub struct SpectrumTraversal {
    data: SpectrumTraversalData,
    position_incr: usize,
    width_incr: usize,
    position: usize,
    width: usize,
}

#[cfg_attr(feature = "pyffi", pymethods)]
impl SpectrumTraversal {
    /// Create a new spectrum traversal.
    #[cfg(feature = "pyffi")]
    #[new]
    pub fn new(illuminant: &Illuminant, observer: &Observer) -> Self {
        Self {
            data: SpectrumTraversalData::new(illuminant, observer),
            position_incr: 5,
            width_incr: 5,
            position: 0,
            width: 0,
        }
    }

    /// Create a new spectrum traversal.
    #[cfg(not(feature = "pyffi"))]
    pub fn new(illuminant: &Illuminant, observer: &Observer) -> Self {
        Self {
            data: SpectrumTraversalData::new(illuminant, observer),
            position_incr: 5,
            width_incr: 5,
            position: 0,
            width: 0,
        }
    }

    /// Determine the current step sizes.
    ///
    /// This iterator actually uses two distinct step sizes, even though they
    /// currently cannot be updated independently. The first step size controls
    /// the stride of starting positions for pulses. The second step size
    /// controls the stride of pulse widths. Starting positions range from 0 to
    /// the number of samples. Pulse widths range form 1 to the number of
    /// samples.
    pub fn step_sizes(&self) -> (usize, usize) {
        (self.position_incr, self.width_incr)
    }

    /// Update the step size for this traversal.
    ///
    /// The given step size is used for selecting the initial position of pulses
    /// as well as the width of pulses. The current default is 5.
    pub fn set_step_sizes(&mut self, step_size: std::num::NonZeroUsize) {
        self.position_incr = step_size.get();
        self.width_incr = step_size.get();
    }

    /// Determine the white point for the spectrum traversal's illuminant and
    /// observer.
    pub fn white_point(&self) -> [Float; 3] {
        let [x, y, z] = self.data.total();
        if 0.0 < y {
            [x / y, 1.0, z / y]
        } else {
            [0.0, 0.0, 0.0]
        }
    }

    /// Restart the spectrum traversal.
    ///
    /// Restarting a spectrum traversal has the benefit of reusing the
    /// iterator's internal state, which easily comprises 1,200 floating point
    /// values that required as many floating point multiplications to generate.
    /// However, that isn't usually done in Rust. Consuming the old iterator
    /// instead isn't possible because of the Python bindings. However,
    /// internally swapping out the pre-multiplied spectral distribution with an
    /// empty dummy value *is* possible and reasonable. It leaves behind an
    /// empty husk of an iterator, hence terminating that iterator if it wasn't
    /// before.
    pub fn restart(&mut self) -> SpectrumTraversal {
        self.width = self.data.len();

        Self {
            data: std::mem::take(&mut self.data),
            position_incr: self.position_incr,
            width_incr: self.width_incr,
            position: 0,
            width: 0,
        }
    }

    /// Get this iterator. <i class=python-only>Python only!</i>
    #[cfg(feature = "pyffi")]
    pub fn __iter__(slf: PyRef<'_, Self>) -> PyRef<'_, Self> {
        slf
    }

    /// Get the next item. <i class=python-only>Python only!</i>
    #[cfg(feature = "pyffi")]
    pub fn __next__(mut slf: PyRefMut<'_, Self>) -> Option<GamutTraversalStep> {
        slf.next()
    }

    /// Get a debug representation. <i class=python-only>Python only!</i>
    #[cfg(feature = "pyffi")]
    pub fn __repr__(&self) -> String {
        format!(
            "SpectrumTraversal(position={}+{}, width={}+{}, {})",
            self.position,
            self.position_incr,
            self.width,
            self.width_incr,
            self.data.len(),
        )
    }
}

#[cfg(not(feature = "pyffi"))]
impl SpectrumTraversal {}

impl Iterator for SpectrumTraversal {
    type Item = GamutTraversalStep;

    fn next(&mut self) -> Option<Self::Item> {
        if self.data.len() <= self.width {
            return None;
        } else if self.width == 0 {
            self.width = 1;
        }

        let color = self.data.color_pulse(self.position, self.width);
        let result = if self.position == 0 {
            GamutTraversalStep::MoveTo(color)
        } else {
            GamutTraversalStep::LineTo(color)
        };

        self.position += self.position_incr;

        if self.data.len() <= self.position {
            self.width += self.width_incr;
            self.position = 0;
        }

        Some(result)
    }
}

impl std::iter::FusedIterator for SpectrumTraversal {}

// const SPECTRAL_LOCUS_LABELS: [usize; 11] = [380, 460, 480, 490, 500, 520, 540, 560, 580, 600, 700];

// ====================================================================================================================

/// The CIE 1931 2-degree standard observer at one-nanometer resolution.
///
/// The data is sourced from the [Color and Vision Research
/// Laboratory](https://web.archive.org/web/20080513125955/http://www-cvrl.ucsd.edu/cmfs.htm)
/// and covers the spectrum from 360 to 830 nanometer, with each channel summing
/// up to a little over 106. Also see [`CIE_OBSERVER_2DEG_2015`].
pub const CIE_OBSERVER_2DEG_1931: Observer = Observer {
    label: "2ยบ Observer 1931",
    start: 360, // ..830
    data: &[
        [0.000129900000, 0.000003917000, 0.000606100000],
        [0.000145847000, 0.000004393581, 0.000680879200],
        [0.000163802100, 0.000004929604, 0.000765145600],
        [0.000184003700, 0.000005532136, 0.000860012400],
        [0.000206690200, 0.000006208245, 0.000966592800],
        [0.000232100000, 0.000006965000, 0.001086000000],
        [0.000260728000, 0.000007813219, 0.001220586000],
        [0.000293075000, 0.000008767336, 0.001372729000],
        [0.000329388000, 0.000009839844, 0.001543579000],
        [0.000369914000, 0.000011043230, 0.001734286000],
        [0.000414900000, 0.000012390000, 0.001946000000],
        [0.000464158700, 0.000013886410, 0.002177777000],
        [0.000518986000, 0.000015557280, 0.002435809000],
        [0.000581854000, 0.000017442960, 0.002731953000],
        [0.000655234700, 0.000019583750, 0.003078064000],
        [0.000741600000, 0.000022020000, 0.003486000000],
        [0.000845029600, 0.000024839650, 0.003975227000],
        [0.000964526800, 0.000028041260, 0.004540880000],
        [0.001094949000, 0.000031531040, 0.005158320000],
        [0.001231154000, 0.000035215210, 0.005802907000],
        [0.001368000000, 0.000039000000, 0.006450001000],
        [0.001502050000, 0.000042826400, 0.007083216000],
        [0.001642328000, 0.000046914600, 0.007745488000],
        [0.001802382000, 0.000051589600, 0.008501152000],
        [0.001995757000, 0.000057176400, 0.009414544000],
        [0.002236000000, 0.000064000000, 0.010549990000],
        [0.002535385000, 0.000072344210, 0.011965800000],
        [0.002892603000, 0.000082212240, 0.013655870000],
        [0.003300829000, 0.000093508160, 0.015588050000],
        [0.003753236000, 0.000106136100, 0.017730150000],
        [0.004243000000, 0.000120000000, 0.020050010000],
        [0.004762389000, 0.000134984000, 0.022511360000],
        [0.005330048000, 0.000151492000, 0.025202880000],
        [0.005978712000, 0.000170208000, 0.028279720000],
        [0.006741117000, 0.000191816000, 0.031897040000],
        [0.007650000000, 0.000217000000, 0.036210000000],
        [0.008751373000, 0.000246906700, 0.041437710000],
        [0.010028880000, 0.000281240000, 0.047503720000],
        [0.011421700000, 0.000318520000, 0.054119880000],
        [0.012869010000, 0.000357266700, 0.060998030000],
        [0.014310000000, 0.000396000000, 0.067850010000],
        [0.015704430000, 0.000433714700, 0.074486320000],
        [0.017147440000, 0.000473024000, 0.081361560000],
        [0.018781220000, 0.000517876000, 0.089153640000],
        [0.020748010000, 0.000572218700, 0.098540480000],
        [0.023190000000, 0.000640000000, 0.110200000000],
        [0.026207360000, 0.000724560000, 0.124613300000],
        [0.029782480000, 0.000825500000, 0.141701700000],
        [0.033880920000, 0.000941160000, 0.161303500000],
        [0.038468240000, 0.001069880000, 0.183256800000],
        [0.043510000000, 0.001210000000, 0.207400000000],
        [0.048995600000, 0.001362091000, 0.233692100000],
        [0.055022600000, 0.001530752000, 0.262611400000],
        [0.061718800000, 0.001720368000, 0.294774600000],
        [0.069212000000, 0.001935323000, 0.330798500000],
        [0.077630000000, 0.002180000000, 0.371300000000],
        [0.086958110000, 0.002454800000, 0.416209100000],
        [0.097176720000, 0.002764000000, 0.465464200000],
        [0.108406300000, 0.003117800000, 0.519694800000],
        [0.120767200000, 0.003526400000, 0.579530300000],
        [0.134380000000, 0.004000000000, 0.645600000000],
        [0.149358200000, 0.004546240000, 0.718483800000],
        [0.165395700000, 0.005159320000, 0.796713300000],
        [0.181983100000, 0.005829280000, 0.877845900000],
        [0.198611000000, 0.006546160000, 0.959439000000],
        [0.214770000000, 0.007300000000, 1.039050100000],
        [0.230186800000, 0.008086507000, 1.115367300000],
        [0.244879700000, 0.008908720000, 1.188497100000],
        [0.258777300000, 0.009767680000, 1.258123300000],
        [0.271807900000, 0.010664430000, 1.323929600000],
        [0.283900000000, 0.011600000000, 1.385600000000],
        [0.294943800000, 0.012573170000, 1.442635200000],
        [0.304896500000, 0.013582720000, 1.494803500000],
        [0.313787300000, 0.014629680000, 1.542190300000],
        [0.321645400000, 0.015715090000, 1.584880700000],
        [0.328500000000, 0.016840000000, 1.622960000000],
        [0.334351300000, 0.018007360000, 1.656404800000],
        [0.339210100000, 0.019214480000, 1.685295900000],
        [0.343121300000, 0.020453920000, 1.709874500000],
        [0.346129600000, 0.021718240000, 1.730382100000],
        [0.348280000000, 0.023000000000, 1.747060000000],
        [0.349599900000, 0.024294610000, 1.760044600000],
        [0.350147400000, 0.025610240000, 1.769623300000],
        [0.350013000000, 0.026958570000, 1.776263700000],
        [0.349287000000, 0.028351250000, 1.780433400000],
        [0.348060000000, 0.029800000000, 1.782600000000],
        [0.346373300000, 0.031310830000, 1.782968200000],
        [0.344262400000, 0.032883680000, 1.781699800000],
        [0.341808800000, 0.034521120000, 1.779198200000],
        [0.339094100000, 0.036225710000, 1.775867100000],
        [0.336200000000, 0.038000000000, 1.772110000000],
        [0.333197700000, 0.039846670000, 1.768258900000],
        [0.330041100000, 0.041768000000, 1.764039000000],
        [0.326635700000, 0.043766000000, 1.758943800000],
        [0.322886800000, 0.045842670000, 1.752466300000],
        [0.318700000000, 0.048000000000, 1.744100000000],
        [0.314025100000, 0.050243680000, 1.733559500000],
        [0.308884000000, 0.052573040000, 1.720858100000],
        [0.303290400000, 0.054980560000, 1.705936900000],
        [0.297257900000, 0.057458720000, 1.688737200000],
        [0.290800000000, 0.060000000000, 1.669200000000],
        [0.283970100000, 0.062601970000, 1.647528700000],
        [0.276721400000, 0.065277520000, 1.623412700000],
        [0.268917800000, 0.068042080000, 1.596022300000],
        [0.260422700000, 0.070911090000, 1.564528000000],
        [0.251100000000, 0.073900000000, 1.528100000000],
        [0.240847500000, 0.077016000000, 1.486111400000],
        [0.229851200000, 0.080266400000, 1.439521500000],
        [0.218407200000, 0.083666800000, 1.389879900000],
        [0.206811500000, 0.087232800000, 1.338736200000],
        [0.195360000000, 0.090980000000, 1.287640000000],
        [0.184213600000, 0.094917550000, 1.237422300000],
        [0.173327300000, 0.099045840000, 1.187824300000],
        [0.162688100000, 0.103367400000, 1.138761100000],
        [0.152283300000, 0.107884600000, 1.090148000000],
        [0.142100000000, 0.112600000000, 1.041900000000],
        [0.132178600000, 0.117532000000, 0.994197600000],
        [0.122569600000, 0.122674400000, 0.947347300000],
        [0.113275200000, 0.127992800000, 0.901453100000],
        [0.104297900000, 0.133452800000, 0.856619300000],
        [0.095640000000, 0.139020000000, 0.812950100000],
        [0.087299550000, 0.144676400000, 0.770517300000],
        [0.079308040000, 0.150469300000, 0.729444800000],
        [0.071717760000, 0.156461900000, 0.689913600000],
        [0.064580990000, 0.162717700000, 0.652104900000],
        [0.057950010000, 0.169300000000, 0.616200000000],
        [0.051862110000, 0.176243100000, 0.582328600000],
        [0.046281520000, 0.183558100000, 0.550416200000],
        [0.041150880000, 0.191273500000, 0.520337600000],
        [0.036412830000, 0.199418000000, 0.491967300000],
        [0.032010000000, 0.208020000000, 0.465180000000],
        [0.027917200000, 0.217119900000, 0.439924600000],
        [0.024144400000, 0.226734500000, 0.416183600000],
        [0.020687000000, 0.236857100000, 0.393882200000],
        [0.017540400000, 0.247481200000, 0.372945900000],
        [0.014700000000, 0.258600000000, 0.353300000000],
        [0.012161790000, 0.270184900000, 0.334857800000],
        [0.009919960000, 0.282293900000, 0.317552100000],
        [0.007967240000, 0.295050500000, 0.301337500000],
        [0.006296346000, 0.308578000000, 0.286168600000],
        [0.004900000000, 0.323000000000, 0.272000000000],
        [0.003777173000, 0.338402100000, 0.258817100000],
        [0.002945320000, 0.354685800000, 0.246483800000],
        [0.002424880000, 0.371698600000, 0.234771800000],
        [0.002236293000, 0.389287500000, 0.223453300000],
        [0.002400000000, 0.407300000000, 0.212300000000],
        [0.002925520000, 0.425629900000, 0.201169200000],
        [0.003836560000, 0.444309600000, 0.190119600000],
        [0.005174840000, 0.463394400000, 0.179225400000],
        [0.006982080000, 0.482939500000, 0.168560800000],
        [0.009300000000, 0.503000000000, 0.158200000000],
        [0.012149490000, 0.523569300000, 0.148138300000],
        [0.015535880000, 0.544512000000, 0.138375800000],
        [0.019477520000, 0.565690000000, 0.128994200000],
        [0.023992770000, 0.586965300000, 0.120075100000],
        [0.029100000000, 0.608200000000, 0.111700000000],
        [0.034814850000, 0.629345600000, 0.103904800000],
        [0.041120160000, 0.650306800000, 0.096667480000],
        [0.047985040000, 0.670875200000, 0.089982720000],
        [0.055378610000, 0.690842400000, 0.083845310000],
        [0.063270000000, 0.710000000000, 0.078249990000],
        [0.071635010000, 0.728185200000, 0.073208990000],
        [0.080462240000, 0.745463600000, 0.068678160000],
        [0.089739960000, 0.761969400000, 0.064567840000],
        [0.099456450000, 0.777836800000, 0.060788350000],
        [0.109600000000, 0.793200000000, 0.057250010000],
        [0.120167400000, 0.808110400000, 0.053904350000],
        [0.131114500000, 0.822496200000, 0.050746640000],
        [0.142367900000, 0.836306800000, 0.047752760000],
        [0.153854200000, 0.849491600000, 0.044898590000],
        [0.165500000000, 0.862000000000, 0.042160000000],
        [0.177257100000, 0.873810800000, 0.039507280000],
        [0.189140000000, 0.884962400000, 0.036935640000],
        [0.201169400000, 0.895493600000, 0.034458360000],
        [0.213365800000, 0.905443200000, 0.032088720000],
        [0.225749900000, 0.914850100000, 0.029840000000],
        [0.238320900000, 0.923734800000, 0.027711810000],
        [0.251066800000, 0.932092400000, 0.025694440000],
        [0.263992200000, 0.939922600000, 0.023787160000],
        [0.277101700000, 0.947225200000, 0.021989250000],
        [0.290400000000, 0.954000000000, 0.020300000000],
        [0.303891200000, 0.960256100000, 0.018718050000],
        [0.317572600000, 0.966007400000, 0.017240360000],
        [0.331438400000, 0.971260600000, 0.015863640000],
        [0.345482800000, 0.976022500000, 0.014584610000],
        [0.359700000000, 0.980300000000, 0.013400000000],
        [0.374083900000, 0.984092400000, 0.012307230000],
        [0.388639600000, 0.987418200000, 0.011301880000],
        [0.403378400000, 0.990312800000, 0.010377920000],
        [0.418311500000, 0.992811600000, 0.009529306000],
        [0.433449900000, 0.994950100000, 0.008749999000],
        [0.448795300000, 0.996710800000, 0.008035200000],
        [0.464336000000, 0.998098300000, 0.007381600000],
        [0.480064000000, 0.999112000000, 0.006785400000],
        [0.495971300000, 0.999748200000, 0.006242800000],
        [0.512050100000, 1.000000000000, 0.005749999000],
        [0.528295900000, 0.999856700000, 0.005303600000],
        [0.544691600000, 0.999304600000, 0.004899800000],
        [0.561209400000, 0.998325500000, 0.004534200000],
        [0.577821500000, 0.996898700000, 0.004202400000],
        [0.594500000000, 0.995000000000, 0.003900000000],
        [0.611220900000, 0.992600500000, 0.003623200000],
        [0.627975800000, 0.989742600000, 0.003370600000],
        [0.644760200000, 0.986444400000, 0.003141400000],
        [0.661569700000, 0.982724100000, 0.002934800000],
        [0.678400000000, 0.978600000000, 0.002749999000],
        [0.695239200000, 0.974083700000, 0.002585200000],
        [0.712058600000, 0.969171200000, 0.002438600000],
        [0.728828400000, 0.963856800000, 0.002309400000],
        [0.745518800000, 0.958134900000, 0.002196800000],
        [0.762100000000, 0.952000000000, 0.002100000000],
        [0.778543200000, 0.945450400000, 0.002017733000],
        [0.794825600000, 0.938499200000, 0.001948200000],
        [0.810926400000, 0.931162800000, 0.001889800000],
        [0.826824800000, 0.923457600000, 0.001840933000],
        [0.842500000000, 0.915400000000, 0.001800000000],
        [0.857932500000, 0.907006400000, 0.001766267000],
        [0.873081600000, 0.898277200000, 0.001737800000],
        [0.887894400000, 0.889204800000, 0.001711200000],
        [0.902318100000, 0.879781600000, 0.001683067000],
        [0.916300000000, 0.870000000000, 0.001650001000],
        [0.929799500000, 0.859861300000, 0.001610133000],
        [0.942798400000, 0.849392000000, 0.001564400000],
        [0.955277600000, 0.838622000000, 0.001513600000],
        [0.967217900000, 0.827581300000, 0.001458533000],
        [0.978600000000, 0.816300000000, 0.001400000000],
        [0.989385600000, 0.804794700000, 0.001336667000],
        [0.999548800000, 0.793082000000, 0.001270000000],
        [1.009089200000, 0.781192000000, 0.001205000000],
        [1.018006400000, 0.769154700000, 0.001146667000],
        [1.026300000000, 0.757000000000, 0.001100000000],
        [1.033982700000, 0.744754100000, 0.001068800000],
        [1.040986000000, 0.732422400000, 0.001049400000],
        [1.047188000000, 0.720003600000, 0.001035600000],
        [1.052466700000, 0.707496500000, 0.001021200000],
        [1.056700000000, 0.694900000000, 0.001000000000],
        [1.059794400000, 0.682219200000, 0.000968640000],
        [1.061799200000, 0.669471600000, 0.000929920000],
        [1.062806800000, 0.656674400000, 0.000886880000],
        [1.062909600000, 0.643844800000, 0.000842560000],
        [1.062200000000, 0.631000000000, 0.000800000000],
        [1.060735200000, 0.618155500000, 0.000760960000],
        [1.058443600000, 0.605314400000, 0.000723680000],
        [1.055224400000, 0.592475600000, 0.000685920000],
        [1.050976800000, 0.579637900000, 0.000645440000],
        [1.045600000000, 0.566800000000, 0.000600000000],
        [1.039036900000, 0.553961100000, 0.000547866700],
        [1.031360800000, 0.541137200000, 0.000491600000],
        [1.022666200000, 0.528352800000, 0.000435400000],
        [1.013047700000, 0.515632300000, 0.000383466700],
        [1.002600000000, 0.503000000000, 0.000340000000],
        [0.991367500000, 0.490468800000, 0.000307253300],
        [0.979331400000, 0.478030400000, 0.000283160000],
        [0.966491600000, 0.465677600000, 0.000265440000],
        [0.952847900000, 0.453403200000, 0.000251813300],
        [0.938400000000, 0.441200000000, 0.000240000000],
        [0.923194000000, 0.429080000000, 0.000229546700],
        [0.907244000000, 0.417036000000, 0.000220640000],
        [0.890502000000, 0.405032000000, 0.000211960000],
        [0.872920000000, 0.393032000000, 0.000202186700],
        [0.854449900000, 0.381000000000, 0.000190000000],
        [0.835084000000, 0.368918400000, 0.000174213300],
        [0.814946000000, 0.356827200000, 0.000155640000],
        [0.794186000000, 0.344776800000, 0.000135960000],
        [0.772954000000, 0.332817600000, 0.000116853300],
        [0.751400000000, 0.321000000000, 0.000100000000],
        [0.729583600000, 0.309338100000, 0.000086133330],
        [0.707588800000, 0.297850400000, 0.000074600000],
        [0.685602200000, 0.286593600000, 0.000065000000],
        [0.663810400000, 0.275624500000, 0.000056933330],
        [0.642400000000, 0.265000000000, 0.000049999990],
        [0.621514900000, 0.254763200000, 0.000044160000],
        [0.601113800000, 0.244889600000, 0.000039480000],
        [0.581105200000, 0.235334400000, 0.000035720000],
        [0.561397700000, 0.226052800000, 0.000032640000],
        [0.541900000000, 0.217000000000, 0.000030000000],
        [0.522599500000, 0.208161600000, 0.000027653330],
        [0.503546400000, 0.199548800000, 0.000025560000],
        [0.484743600000, 0.191155200000, 0.000023640000],
        [0.466193900000, 0.182974400000, 0.000021813330],
        [0.447900000000, 0.175000000000, 0.000020000000],
        [0.429861300000, 0.167223500000, 0.000018133330],
        [0.412098000000, 0.159646400000, 0.000016200000],
        [0.394644000000, 0.152277600000, 0.000014200000],
        [0.377533300000, 0.145125900000, 0.000012133330],
        [0.360800000000, 0.138200000000, 0.000010000000],
        [0.344456300000, 0.131500300000, 0.000007733333],
        [0.328516800000, 0.125024800000, 0.000005400000],
        [0.313019200000, 0.118779200000, 0.000003200000],
        [0.298001100000, 0.112769100000, 0.000001333333],
        [0.283500000000, 0.107000000000, 0.000000000000],
        [0.269544800000, 0.101476200000, 0.000000000000],
        [0.256118400000, 0.096188640000, 0.000000000000],
        [0.243189600000, 0.091122960000, 0.000000000000],
        [0.230727200000, 0.086264850000, 0.000000000000],
        [0.218700000000, 0.081600000000, 0.000000000000],
        [0.207097100000, 0.077120640000, 0.000000000000],
        [0.195923200000, 0.072825520000, 0.000000000000],
        [0.185170800000, 0.068710080000, 0.000000000000],
        [0.174832300000, 0.064769760000, 0.000000000000],
        [0.164900000000, 0.061000000000, 0.000000000000],
        [0.155366700000, 0.057396210000, 0.000000000000],
        [0.146230000000, 0.053955040000, 0.000000000000],
        [0.137490000000, 0.050673760000, 0.000000000000],
        [0.129146700000, 0.047549650000, 0.000000000000],
        [0.121200000000, 0.044580000000, 0.000000000000],
        [0.113639700000, 0.041758720000, 0.000000000000],
        [0.106465000000, 0.039084960000, 0.000000000000],
        [0.099690440000, 0.036563840000, 0.000000000000],
        [0.093330610000, 0.034200480000, 0.000000000000],
        [0.087400000000, 0.032000000000, 0.000000000000],
        [0.081900960000, 0.029962610000, 0.000000000000],
        [0.076804280000, 0.028076640000, 0.000000000000],
        [0.072077120000, 0.026329360000, 0.000000000000],
        [0.067686640000, 0.024708050000, 0.000000000000],
        [0.063600000000, 0.023200000000, 0.000000000000],
        [0.059806850000, 0.021800770000, 0.000000000000],
        [0.056282160000, 0.020501120000, 0.000000000000],
        [0.052971040000, 0.019281080000, 0.000000000000],
        [0.049818610000, 0.018120690000, 0.000000000000],
        [0.046770000000, 0.017000000000, 0.000000000000],
        [0.043784050000, 0.015903790000, 0.000000000000],
        [0.040875360000, 0.014837180000, 0.000000000000],
        [0.038072640000, 0.013810680000, 0.000000000000],
        [0.035404610000, 0.012834780000, 0.000000000000],
        [0.032900000000, 0.011920000000, 0.000000000000],
        [0.030564190000, 0.011068310000, 0.000000000000],
        [0.028380560000, 0.010273390000, 0.000000000000],
        [0.026344840000, 0.009533311000, 0.000000000000],
        [0.024452750000, 0.008846157000, 0.000000000000],
        [0.022700000000, 0.008210000000, 0.000000000000],
        [0.021084290000, 0.007623781000, 0.000000000000],
        [0.019599880000, 0.007085424000, 0.000000000000],
        [0.018237320000, 0.006591476000, 0.000000000000],
        [0.016987170000, 0.006138485000, 0.000000000000],
        [0.015840000000, 0.005723000000, 0.000000000000],
        [0.014790640000, 0.005343059000, 0.000000000000],
        [0.013831320000, 0.004995796000, 0.000000000000],
        [0.012948680000, 0.004676404000, 0.000000000000],
        [0.012129200000, 0.004380075000, 0.000000000000],
        [0.011359160000, 0.004102000000, 0.000000000000],
        [0.010629350000, 0.003838453000, 0.000000000000],
        [0.009938846000, 0.003589099000, 0.000000000000],
        [0.009288422000, 0.003354219000, 0.000000000000],
        [0.008678854000, 0.003134093000, 0.000000000000],
        [0.008110916000, 0.002929000000, 0.000000000000],
        [0.007582388000, 0.002738139000, 0.000000000000],
        [0.007088746000, 0.002559876000, 0.000000000000],
        [0.006627313000, 0.002393244000, 0.000000000000],
        [0.006195408000, 0.002237275000, 0.000000000000],
        [0.005790346000, 0.002091000000, 0.000000000000],
        [0.005409826000, 0.001953587000, 0.000000000000],
        [0.005052583000, 0.001824580000, 0.000000000000],
        [0.004717512000, 0.001703580000, 0.000000000000],
        [0.004403507000, 0.001590187000, 0.000000000000],
        [0.004109457000, 0.001484000000, 0.000000000000],
        [0.003833913000, 0.001384496000, 0.000000000000],
        [0.003575748000, 0.001291268000, 0.000000000000],
        [0.003334342000, 0.001204092000, 0.000000000000],
        [0.003109075000, 0.001122744000, 0.000000000000],
        [0.002899327000, 0.001047000000, 0.000000000000],
        [0.002704348000, 0.000976589600, 0.000000000000],
        [0.002523020000, 0.000911108800, 0.000000000000],
        [0.002354168000, 0.000850133200, 0.000000000000],
        [0.002196616000, 0.000793238400, 0.000000000000],
        [0.002049190000, 0.000740000000, 0.000000000000],
        [0.001910960000, 0.000690082700, 0.000000000000],
        [0.001781438000, 0.000643310000, 0.000000000000],
        [0.001660110000, 0.000599496000, 0.000000000000],
        [0.001546459000, 0.000558454700, 0.000000000000],
        [0.001439971000, 0.000520000000, 0.000000000000],
        [0.001340042000, 0.000483913600, 0.000000000000],
        [0.001246275000, 0.000450052800, 0.000000000000],
        [0.001158471000, 0.000418345200, 0.000000000000],
        [0.001076430000, 0.000388718400, 0.000000000000],
        [0.000999949300, 0.000361100000, 0.000000000000],
        [0.000928735800, 0.000335383500, 0.000000000000],
        [0.000862433200, 0.000311440400, 0.000000000000],
        [0.000800750300, 0.000289165600, 0.000000000000],
        [0.000743396000, 0.000268453900, 0.000000000000],
        [0.000690078600, 0.000249200000, 0.000000000000],
        [0.000640515600, 0.000231301900, 0.000000000000],
        [0.000594502100, 0.000214685600, 0.000000000000],
        [0.000551864600, 0.000199288400, 0.000000000000],
        [0.000512429000, 0.000185047500, 0.000000000000],
        [0.000476021300, 0.000171900000, 0.000000000000],
        [0.000442453600, 0.000159778100, 0.000000000000],
        [0.000411511700, 0.000148604400, 0.000000000000],
        [0.000382981400, 0.000138301600, 0.000000000000],
        [0.000356649100, 0.000128792500, 0.000000000000],
        [0.000332301100, 0.000120000000, 0.000000000000],
        [0.000309758600, 0.000111859500, 0.000000000000],
        [0.000288887100, 0.000104322400, 0.000000000000],
        [0.000269539400, 0.000097335600, 0.000000000000],
        [0.000251568200, 0.000090845870, 0.000000000000],
        [0.000234826100, 0.000084800000, 0.000000000000],
        [0.000219171000, 0.000079146670, 0.000000000000],
        [0.000204525800, 0.000073858000, 0.000000000000],
        [0.000190840500, 0.000068916000, 0.000000000000],
        [0.000178065400, 0.000064302670, 0.000000000000],
        [0.000166150500, 0.000060000000, 0.000000000000],
        [0.000155023600, 0.000055981870, 0.000000000000],
        [0.000144621900, 0.000052225600, 0.000000000000],
        [0.000134909800, 0.000048718400, 0.000000000000],
        [0.000125852000, 0.000045447470, 0.000000000000],
        [0.000117413000, 0.000042400000, 0.000000000000],
        [0.000109551500, 0.000039561040, 0.000000000000],
        [0.000102224500, 0.000036915120, 0.000000000000],
        [0.000095394450, 0.000034448680, 0.000000000000],
        [0.000089023900, 0.000032148160, 0.000000000000],
        [0.000083075270, 0.000030000000, 0.000000000000],
        [0.000077512690, 0.000027991250, 0.000000000000],
        [0.000072313040, 0.000026113560, 0.000000000000],
        [0.000067457780, 0.000024360240, 0.000000000000],
        [0.000062928440, 0.000022724610, 0.000000000000],
        [0.000058706520, 0.000021200000, 0.000000000000],
        [0.000054770280, 0.000019778550, 0.000000000000],
        [0.000051099180, 0.000018452850, 0.000000000000],
        [0.000047676540, 0.000017216870, 0.000000000000],
        [0.000044485670, 0.000016064590, 0.000000000000],
        [0.000041509940, 0.000014990000, 0.000000000000],
        [0.000038733240, 0.000013987280, 0.000000000000],
        [0.000036142030, 0.000013051550, 0.000000000000],
        [0.000033723520, 0.000012178180, 0.000000000000],
        [0.000031464870, 0.000011362540, 0.000000000000],
        [0.000029353260, 0.000010600000, 0.000000000000],
        [0.000027375730, 0.000009885877, 0.000000000000],
        [0.000025524330, 0.000009217304, 0.000000000000],
        [0.000023793760, 0.000008592362, 0.000000000000],
        [0.000022178700, 0.000008009133, 0.000000000000],
        [0.000020673830, 0.000007465700, 0.000000000000],
        [0.000019272260, 0.000006959567, 0.000000000000],
        [0.000017966400, 0.000006487995, 0.000000000000],
        [0.000016749910, 0.000006048699, 0.000000000000],
        [0.000015616480, 0.000005639396, 0.000000000000],
        [0.000014559770, 0.000005257800, 0.000000000000],
        [0.000013573870, 0.000004901771, 0.000000000000],
        [0.000012654360, 0.000004569720, 0.000000000000],
        [0.000011797230, 0.000004260194, 0.000000000000],
        [0.000010998440, 0.000003971739, 0.000000000000],
        [0.000010253980, 0.000003702900, 0.000000000000],
        [0.000009559646, 0.000003452163, 0.000000000000],
        [0.000008912044, 0.000003218302, 0.000000000000],
        [0.000008308358, 0.000003000300, 0.000000000000],
        [0.000007745769, 0.000002797139, 0.000000000000],
        [0.000007221456, 0.000002607800, 0.000000000000],
        [0.000006732475, 0.000002431220, 0.000000000000],
        [0.000006276423, 0.000002266531, 0.000000000000],
        [0.000005851304, 0.000002113013, 0.000000000000],
        [0.000005455118, 0.000001969943, 0.000000000000],
        [0.000005085868, 0.000001836600, 0.000000000000],
        [0.000004741466, 0.000001712230, 0.000000000000],
        [0.000004420236, 0.000001596228, 0.000000000000],
        [0.000004120783, 0.000001488090, 0.000000000000],
        [0.000003841716, 0.000001387314, 0.000000000000],
        [0.000003581652, 0.000001293400, 0.000000000000],
        [0.000003339127, 0.000001205820, 0.000000000000],
        [0.000003112949, 0.000001124143, 0.000000000000],
        [0.000002902121, 0.000001048009, 0.000000000000],
        [0.000002705645, 0.000000977058, 0.000000000000],
        [0.000002522525, 0.000000910930, 0.000000000000],
        [0.000002351726, 0.000000849251, 0.000000000000],
        [0.000002192415, 0.000000791721, 0.000000000000],
        [0.000002043902, 0.000000738090, 0.000000000000],
        [0.000001905497, 0.000000688110, 0.000000000000],
        [0.000001776509, 0.000000641530, 0.000000000000],
        [0.000001656215, 0.000000598090, 0.000000000000],
        [0.000001544022, 0.000000557575, 0.000000000000],
        [0.000001439440, 0.000000519808, 0.000000000000],
        [0.000001341977, 0.000000484612, 0.000000000000],
        [0.000001251141, 0.000000451810, 0.000000000000],
    ],
};

/// The CIE 2015 2-degree standard observer at one-nanometer resolution.
///
/// Compared to [`CIE_OBSERVER_2DEG_1931`], this version has 30 fewer entries,
/// starting at 390nm instead of 360nm. Furthermore, each channel sums up to a
/// little more than 113 instead of a little more than 106.
pub const CIE_OBSERVER_2DEG_2015: Observer = Observer {
    label: "2ยบ Observer 2015",
    start: 390, // ..=830
    data: &[
        [3.769647e-03, 4.146161e-04, 1.847260e-02],
        [4.532416e-03, 5.028333e-04, 2.221101e-02],
        [5.446553e-03, 6.084991e-04, 2.669819e-02],
        [6.538868e-03, 7.344436e-04, 3.206937e-02],
        [7.839699e-03, 8.837389e-04, 3.847832e-02],
        [9.382967e-03, 1.059646e-03, 4.609784e-02],
        [1.120608e-02, 1.265532e-03, 5.511953e-02],
        [1.334965e-02, 1.504753e-03, 6.575257e-02],
        [1.585690e-02, 1.780493e-03, 7.822113e-02],
        [1.877286e-02, 2.095572e-03, 9.276013e-02],
        [2.214302e-02, 2.452194e-03, 1.096090e-01],
        [2.601285e-02, 2.852216e-03, 1.290077e-01],
        [3.043036e-02, 3.299115e-03, 1.512047e-01],
        [3.544325e-02, 3.797466e-03, 1.764441e-01],
        [4.109640e-02, 4.352768e-03, 2.049517e-01],
        [4.742986e-02, 4.971717e-03, 2.369246e-01],
        [5.447394e-02, 5.661014e-03, 2.725123e-01],
        [6.223612e-02, 6.421615e-03, 3.117820e-01],
        [7.070048e-02, 7.250312e-03, 3.547064e-01],
        [7.982513e-02, 8.140173e-03, 4.011473e-01],
        [8.953803e-02, 9.079860e-03, 4.508369e-01],
        [9.974848e-02, 1.005608e-02, 5.034164e-01],
        [1.104019e-01, 1.106456e-02, 5.586361e-01],
        [1.214566e-01, 1.210522e-02, 6.162734e-01],
        [1.328741e-01, 1.318014e-02, 6.760982e-01],
        [1.446214e-01, 1.429377e-02, 7.378822e-01],
        [1.566468e-01, 1.545004e-02, 8.013019e-01],
        [1.687901e-01, 1.664093e-02, 8.655573e-01],
        [1.808328e-01, 1.785302e-02, 9.295791e-01],
        [1.925216e-01, 1.907018e-02, 9.921293e-01],
        [2.035729e-01, 2.027369e-02, 1.051821e00],
        [2.137531e-01, 2.144805e-02, 1.107509e00],
        [2.231348e-01, 2.260041e-02, 1.159527e00],
        [2.319245e-01, 2.374789e-02, 1.208869e00],
        [2.403892e-01, 2.491247e-02, 1.256834e00],
        [2.488523e-01, 2.612106e-02, 1.305008e00],
        [2.575896e-01, 2.739923e-02, 1.354758e00],
        [2.664991e-01, 2.874993e-02, 1.405594e00],
        [2.753532e-01, 3.016909e-02, 1.456414e00],
        [2.838921e-01, 3.165145e-02, 1.505960e00],
        [2.918246e-01, 3.319038e-02, 1.552826e00],
        [2.989200e-01, 3.477912e-02, 1.595902e00],
        [3.052993e-01, 3.641495e-02, 1.635768e00],
        [3.112031e-01, 3.809569e-02, 1.673573e00],
        [3.169047e-01, 3.981843e-02, 1.710604e00],
        [3.227087e-01, 4.157940e-02, 1.748280e00],
        [3.288194e-01, 4.337098e-02, 1.787504e00],
        [3.349242e-01, 4.517180e-02, 1.826609e00],
        [3.405452e-01, 4.695420e-02, 1.863108e00],
        [3.451688e-01, 4.868718e-02, 1.894332e00],
        [3.482554e-01, 5.033657e-02, 1.917479e00],
        [3.494153e-01, 5.187611e-02, 1.930529e00],
        [3.489075e-01, 5.332218e-02, 1.934819e00],
        [3.471746e-01, 5.470603e-02, 1.932650e00],
        [3.446705e-01, 5.606335e-02, 1.926395e00],
        [3.418483e-01, 5.743393e-02, 1.918437e00],
        [3.390240e-01, 5.885107e-02, 1.910430e00],
        [3.359926e-01, 6.030809e-02, 1.901224e00],
        [3.324276e-01, 6.178644e-02, 1.889000e00],
        [3.280157e-01, 6.326570e-02, 1.871996e00],
        [3.224637e-01, 6.472352e-02, 1.848545e00],
        [3.156225e-01, 6.614749e-02, 1.817792e00],
        [3.078201e-01, 6.757256e-02, 1.781627e00],
        [2.994771e-01, 6.904928e-02, 1.742514e00],
        [2.909776e-01, 7.063280e-02, 1.702749e00],
        [2.826646e-01, 7.238339e-02, 1.664439e00],
        [2.747962e-01, 7.435960e-02, 1.629207e00],
        [2.674312e-01, 7.659383e-02, 1.597360e00],
        [2.605847e-01, 7.911436e-02, 1.568896e00],
        [2.542749e-01, 8.195345e-02, 1.543823e00],
        [2.485254e-01, 8.514816e-02, 1.522157e00],
        [2.433039e-01, 8.872657e-02, 1.503611e00],
        [2.383414e-01, 9.266008e-02, 1.486673e00],
        [2.333253e-01, 9.689723e-02, 1.469595e00],
        [2.279619e-01, 1.013746e-01, 1.450709e00],
        [2.219781e-01, 1.060145e-01, 1.428440e00],
        [2.151735e-01, 1.107377e-01, 1.401587e00],
        [2.075619e-01, 1.155111e-01, 1.370094e00],
        [1.992183e-01, 1.203122e-01, 1.334220e00],
        [1.902290e-01, 1.251161e-01, 1.294275e00],
        [1.806905e-01, 1.298957e-01, 1.250610e00],
        [1.707154e-01, 1.346299e-01, 1.203696e00],
        [1.604471e-01, 1.393309e-01, 1.154316e00],
        [1.500244e-01, 1.440235e-01, 1.103284e00],
        [1.395705e-01, 1.487372e-01, 1.051347e00],
        [1.291920e-01, 1.535066e-01, 9.991789e-01],
        [1.189859e-01, 1.583644e-01, 9.473958e-01],
        [1.090615e-01, 1.633199e-01, 8.966222e-01],
        [9.951424e-02, 1.683761e-01, 8.473981e-01],
        [9.041850e-02, 1.735365e-01, 8.001576e-01],
        [8.182895e-02, 1.788048e-01, 7.552379e-01],
        [7.376817e-02, 1.841819e-01, 7.127879e-01],
        [6.619477e-02, 1.896559e-01, 6.725198e-01],
        [5.906380e-02, 1.952101e-01, 6.340976e-01],
        [5.234242e-02, 2.008259e-01, 5.972433e-01],
        [4.600865e-02, 2.064828e-01, 5.617313e-01],
        [4.006154e-02, 2.121826e-01, 5.274921e-01],
        [3.454373e-02, 2.180279e-01, 4.948809e-01],
        [2.949091e-02, 2.241586e-01, 4.642586e-01],
        [2.492140e-02, 2.307302e-01, 4.358841e-01],
        [2.083981e-02, 2.379160e-01, 4.099313e-01],
        [1.723591e-02, 2.458706e-01, 3.864261e-01],
        [1.407924e-02, 2.546023e-01, 3.650566e-01],
        [1.134516e-02, 2.640760e-01, 3.454812e-01],
        [9.019658e-03, 2.742490e-01, 3.274095e-01],
        [7.097731e-03, 2.850680e-01, 3.105939e-01],
        [5.571145e-03, 2.964837e-01, 2.948102e-01],
        [4.394566e-03, 3.085010e-01, 2.798194e-01],
        [3.516303e-03, 3.211393e-01, 2.654100e-01],
        [2.887638e-03, 3.344175e-01, 2.514084e-01],
        [2.461588e-03, 3.483536e-01, 2.376753e-01],
        [2.206348e-03, 3.629601e-01, 2.241211e-01],
        [2.149559e-03, 3.782275e-01, 2.107484e-01],
        [2.337091e-03, 3.941359e-01, 1.975839e-01],
        [2.818931e-03, 4.106582e-01, 1.846574e-01],
        [3.649178e-03, 4.277595e-01, 1.720018e-01],
        [4.891359e-03, 4.453993e-01, 1.596918e-01],
        [6.629364e-03, 4.635396e-01, 1.479415e-01],
        [8.942902e-03, 4.821376e-01, 1.369428e-01],
        [1.190224e-02, 5.011430e-01, 1.268279e-01],
        [1.556989e-02, 5.204972e-01, 1.176796e-01],
        [1.997668e-02, 5.401387e-01, 1.094970e-01],
        [2.504698e-02, 5.600208e-01, 1.020943e-01],
        [3.067530e-02, 5.800972e-01, 9.527993e-02],
        [3.674999e-02, 6.003172e-01, 8.890075e-02],
        [4.315171e-02, 6.206256e-01, 8.283548e-02],
        [4.978584e-02, 6.409398e-01, 7.700982e-02],
        [5.668554e-02, 6.610772e-01, 7.144001e-02],
        [6.391651e-02, 6.808134e-01, 6.615436e-02],
        [7.154352e-02, 6.999044e-01, 6.117199e-02],
        [7.962917e-02, 7.180890e-01, 5.650407e-02],
        [8.821473e-02, 7.351593e-01, 5.215121e-02],
        [9.726978e-02, 7.511821e-01, 4.809566e-02],
        [1.067504e-01, 7.663143e-01, 4.431720e-02],
        [1.166192e-01, 7.807352e-01, 4.079734e-02],
        [1.268468e-01, 7.946448e-01, 3.751912e-02],
        [1.374060e-01, 8.082074e-01, 3.446846e-02],
        [1.482471e-01, 8.213817e-01, 3.163764e-02],
        [1.593076e-01, 8.340701e-01, 2.901901e-02],
        [1.705181e-01, 8.461711e-01, 2.660364e-02],
        [1.818026e-01, 8.575799e-01, 2.438164e-02],
        [1.931090e-01, 8.682408e-01, 2.234097e-02],
        [2.045085e-01, 8.783061e-01, 2.046415e-02],
        [2.161166e-01, 8.879907e-01, 1.873456e-02],
        [2.280650e-01, 8.975211e-01, 1.713788e-02],
        [2.405015e-01, 9.071347e-01, 1.566174e-02],
        [2.535441e-01, 9.169947e-01, 1.429644e-02],
        [2.671300e-01, 9.269295e-01, 1.303702e-02],
        [2.811351e-01, 9.366731e-01, 1.187897e-02],
        [2.954164e-01, 9.459482e-01, 1.081725e-02],
        [3.098117e-01, 9.544675e-01, 9.846470e-03],
        [3.241678e-01, 9.619834e-01, 8.960687e-03],
        [3.384319e-01, 9.684390e-01, 8.152811e-03],
        [3.525786e-01, 9.738289e-01, 7.416025e-03],
        [3.665839e-01, 9.781519e-01, 6.744115e-03],
        [3.804244e-01, 9.814106e-01, 6.131421e-03],
        [3.940988e-01, 9.836669e-01, 5.572778e-03],
        [4.076972e-01, 9.852081e-01, 5.063463e-03],
        [4.213484e-01, 9.863813e-01, 4.599169e-03],
        [4.352003e-01, 9.875357e-01, 4.175971e-03],
        [4.494206e-01, 9.890228e-01, 3.790291e-03],
        [4.641616e-01, 9.910811e-01, 3.438952e-03],
        [4.794395e-01, 9.934913e-01, 3.119341e-03],
        [4.952180e-01, 9.959172e-01, 2.829038e-03],
        [5.114395e-01, 9.980205e-01, 2.565722e-03],
        [5.280233e-01, 9.994608e-01, 2.327186e-03],
        [5.448696e-01, 9.999930e-01, 2.111280e-03],
        [5.618898e-01, 9.997557e-01, 1.915766e-03],
        [5.790137e-01, 9.989839e-01, 1.738589e-03],
        [5.961882e-01, 9.979123e-01, 1.577920e-03],
        [6.133784e-01, 9.967737e-01, 1.432128e-03],
        [6.305897e-01, 9.957356e-01, 1.299781e-03],
        [6.479223e-01, 9.947115e-01, 1.179667e-03],
        [6.654866e-01, 9.935534e-01, 1.070694e-03],
        [6.833782e-01, 9.921156e-01, 9.718623e-04],
        [7.016774e-01, 9.902549e-01, 8.822531e-04],
        [7.204110e-01, 9.878596e-01, 8.010231e-04],
        [7.394495e-01, 9.849324e-01, 7.273884e-04],
        [7.586285e-01, 9.815036e-01, 6.606347e-04],
        [7.777885e-01, 9.776035e-01, 6.001146e-04],
        [7.967750e-01, 9.732611e-01, 5.452416e-04],
        [8.154530e-01, 9.684764e-01, 4.954847e-04],
        [8.337389e-01, 9.631369e-01, 4.503642e-04],
        [8.515493e-01, 9.571062e-01, 4.094455e-04],
        [8.687862e-01, 9.502540e-01, 3.723345e-04],
        [8.853376e-01, 9.424569e-01, 3.386739e-04],
        [9.011588e-01, 9.336897e-01, 3.081396e-04],
        [9.165278e-01, 9.242893e-01, 2.804370e-04],
        [9.318245e-01, 9.146707e-01, 2.552996e-04],
        [9.474524e-01, 9.052333e-01, 2.324859e-04],
        [9.638388e-01, 8.963613e-01, 2.117772e-04],
        [9.812596e-01, 8.883069e-01, 1.929758e-04],
        [9.992953e-01, 8.808462e-01, 1.759024e-04],
        [1.017343e00, 8.736445e-01, 1.603947e-04],
        [1.034790e00, 8.663755e-01, 1.463059e-04],
        [1.051011e00, 8.587203e-01, 1.335031e-04],
        [1.065522e00, 8.504295e-01, 1.218660e-04],
        [1.078421e00, 8.415047e-01, 1.112857e-04],
        [1.089944e00, 8.320109e-01, 1.016634e-04],
        [1.100320e00, 8.220154e-01, 9.291003e-05],
        [1.109767e00, 8.115868e-01, 8.494468e-05],
        [1.118438e00, 8.007874e-01, 7.769425e-05],
        [1.126266e00, 7.896515e-01, 7.109247e-05],
        [1.133138e00, 7.782053e-01, 6.507936e-05],
        [1.138952e00, 7.664733e-01, 5.960061e-05],
        [1.143620e00, 7.544785e-01, 5.460706e-05],
        [1.147095e00, 7.422473e-01, 5.005417e-05],
        [1.149464e00, 7.298229e-01, 4.590157e-05],
        [1.150838e00, 7.172525e-01, 4.211268e-05],
        [1.151326e00, 7.045818e-01, 3.865437e-05],
        [1.151033e00, 6.918553e-01, 3.549661e-05],
        [1.150002e00, 6.791009e-01, 3.261220e-05],
        [1.148061e00, 6.662846e-01, 2.997643e-05],
        [1.144998e00, 6.533595e-01, 2.756693e-05],
        [1.140622e00, 6.402807e-01, 2.536339e-05],
        [1.134757e00, 6.270066e-01, 2.334738e-05],
        [1.127298e00, 6.135148e-01, 2.150221e-05],
        [1.118342e00, 5.998494e-01, 1.981268e-05],
        [1.108033e00, 5.860682e-01, 1.826500e-05],
        [1.096515e00, 5.722261e-01, 1.684667e-05],
        [1.083928e00, 5.583746e-01, 1.554631e-05],
        [1.070387e00, 5.445535e-01, 1.435360e-05],
        [1.055934e00, 5.307673e-01, 1.325915e-05],
        [1.040592e00, 5.170130e-01, 1.225443e-05],
        [1.024385e00, 5.032889e-01, 1.133169e-05],
        [1.007344e00, 4.895950e-01, 1.048387e-05],
        [9.895268e-01, 4.759442e-01, 0.000000e00],
        [9.711213e-01, 4.623958e-01, 0.000000e00],
        [9.523257e-01, 4.490154e-01, 0.000000e00],
        [9.333248e-01, 4.358622e-01, 0.000000e00],
        [9.142877e-01, 4.229897e-01, 0.000000e00],
        [8.952798e-01, 4.104152e-01, 0.000000e00],
        [8.760157e-01, 3.980356e-01, 0.000000e00],
        [8.561607e-01, 3.857300e-01, 0.000000e00],
        [8.354235e-01, 3.733907e-01, 0.000000e00],
        [8.135565e-01, 3.609245e-01, 0.000000e00],
        [7.904565e-01, 3.482860e-01, 0.000000e00],
        [7.664364e-01, 3.355702e-01, 0.000000e00],
        [7.418777e-01, 3.228963e-01, 0.000000e00],
        [7.171219e-01, 3.103704e-01, 0.000000e00],
        [6.924717e-01, 2.980865e-01, 0.000000e00],
        [6.681600e-01, 2.861160e-01, 0.000000e00],
        [6.442697e-01, 2.744822e-01, 0.000000e00],
        [6.208450e-01, 2.631953e-01, 0.000000e00],
        [5.979243e-01, 2.522628e-01, 0.000000e00],
        [5.755410e-01, 2.416902e-01, 0.000000e00],
        [5.537296e-01, 2.314809e-01, 0.000000e00],
        [5.325412e-01, 2.216378e-01, 0.000000e00],
        [5.120218e-01, 2.121622e-01, 0.000000e00],
        [4.922070e-01, 2.030542e-01, 0.000000e00],
        [4.731224e-01, 1.943124e-01, 0.000000e00],
        [4.547417e-01, 1.859227e-01, 0.000000e00],
        [4.368719e-01, 1.778274e-01, 0.000000e00],
        [4.193121e-01, 1.699654e-01, 0.000000e00],
        [4.018980e-01, 1.622841e-01, 0.000000e00],
        [3.844986e-01, 1.547397e-01, 0.000000e00],
        [3.670592e-01, 1.473081e-01, 0.000000e00],
        [3.497167e-01, 1.400169e-01, 0.000000e00],
        [3.326305e-01, 1.329013e-01, 0.000000e00],
        [3.159341e-01, 1.259913e-01, 0.000000e00],
        [2.997374e-01, 1.193120e-01, 0.000000e00],
        [2.841189e-01, 1.128820e-01, 0.000000e00],
        [2.691053e-01, 1.067113e-01, 0.000000e00],
        [2.547077e-01, 1.008052e-01, 0.000000e00],
        [2.409319e-01, 9.516653e-02, 0.000000e00],
        [2.277792e-01, 8.979594e-02, 0.000000e00],
        [2.152431e-01, 8.469044e-02, 0.000000e00],
        [2.033010e-01, 7.984009e-02, 0.000000e00],
        [1.919276e-01, 7.523372e-02, 0.000000e00],
        [1.810987e-01, 7.086061e-02, 0.000000e00],
        [1.707914e-01, 6.671045e-02, 0.000000e00],
        [1.609842e-01, 6.277360e-02, 0.000000e00],
        [1.516577e-01, 5.904179e-02, 0.000000e00],
        [1.427936e-01, 5.550703e-02, 0.000000e00],
        [1.343737e-01, 5.216139e-02, 0.000000e00],
        [1.263808e-01, 4.899699e-02, 0.000000e00],
        [1.187979e-01, 4.600578e-02, 0.000000e00],
        [1.116088e-01, 4.317885e-02, 0.000000e00],
        [1.047975e-01, 4.050755e-02, 0.000000e00],
        [9.834835e-02, 3.798376e-02, 0.000000e00],
        [9.224597e-02, 3.559982e-02, 0.000000e00],
        [8.647506e-02, 3.334856e-02, 0.000000e00],
        [8.101986e-02, 3.122332e-02, 0.000000e00],
        [7.586514e-02, 2.921780e-02, 0.000000e00],
        [7.099633e-02, 2.732601e-02, 0.000000e00],
        [6.639960e-02, 2.554223e-02, 0.000000e00],
        [6.206225e-02, 2.386121e-02, 0.000000e00],
        [5.797409e-02, 2.227859e-02, 0.000000e00],
        [5.412533e-02, 2.079020e-02, 0.000000e00],
        [5.050600e-02, 1.939185e-02, 0.000000e00],
        [4.710606e-02, 1.807939e-02, 0.000000e00],
        [4.391411e-02, 1.684817e-02, 0.000000e00],
        [4.091411e-02, 1.569188e-02, 0.000000e00],
        [3.809067e-02, 1.460446e-02, 0.000000e00],
        [3.543034e-02, 1.358062e-02, 0.000000e00],
        [3.292138e-02, 1.261573e-02, 0.000000e00],
        [3.055672e-02, 1.170696e-02, 0.000000e00],
        [2.834146e-02, 1.085608e-02, 0.000000e00],
        [2.628033e-02, 1.006476e-02, 0.000000e00],
        [2.437465e-02, 9.333376e-03, 0.000000e00],
        [2.262306e-02, 8.661284e-03, 0.000000e00],
        [2.101935e-02, 8.046048e-03, 0.000000e00],
        [1.954647e-02, 7.481130e-03, 0.000000e00],
        [1.818727e-02, 6.959987e-03, 0.000000e00],
        [1.692727e-02, 6.477070e-03, 0.000000e00],
        [1.575417e-02, 6.027677e-03, 0.000000e00],
        [1.465854e-02, 5.608169e-03, 0.000000e00],
        [1.363571e-02, 5.216691e-03, 0.000000e00],
        [1.268205e-02, 4.851785e-03, 0.000000e00],
        [1.179394e-02, 4.512008e-03, 0.000000e00],
        [1.096778e-02, 4.195941e-03, 0.000000e00],
        [1.019964e-02, 3.902057e-03, 0.000000e00],
        [9.484317e-03, 3.628371e-03, 0.000000e00],
        [8.816851e-03, 3.373005e-03, 0.000000e00],
        [8.192921e-03, 3.134315e-03, 0.000000e00],
        [7.608750e-03, 2.910864e-03, 0.000000e00],
        [7.061391e-03, 2.701528e-03, 0.000000e00],
        [6.549509e-03, 2.505796e-03, 0.000000e00],
        [6.071970e-03, 2.323231e-03, 0.000000e00],
        [5.627476e-03, 2.153333e-03, 0.000000e00],
        [5.214608e-03, 1.995557e-03, 0.000000e00],
        [4.831848e-03, 1.849316e-03, 0.000000e00],
        [4.477579e-03, 1.713976e-03, 0.000000e00],
        [4.150166e-03, 1.588899e-03, 0.000000e00],
        [3.847988e-03, 1.473453e-03, 0.000000e00],
        [3.569452e-03, 1.367022e-03, 0.000000e00],
        [3.312857e-03, 1.268954e-03, 0.000000e00],
        [3.076022e-03, 1.178421e-03, 0.000000e00],
        [2.856894e-03, 1.094644e-03, 0.000000e00],
        [2.653681e-03, 1.016943e-03, 0.000000e00],
        [2.464821e-03, 9.447269e-04, 0.000000e00],
        [2.289060e-03, 8.775171e-04, 0.000000e00],
        [2.125694e-03, 8.150438e-04, 0.000000e00],
        [1.974121e-03, 7.570755e-04, 0.000000e00],
        [1.833723e-03, 7.033755e-04, 0.000000e00],
        [1.703876e-03, 6.537050e-04, 0.000000e00],
        [1.583904e-03, 6.078048e-04, 0.000000e00],
        [1.472939e-03, 5.653435e-04, 0.000000e00],
        [1.370151e-03, 5.260046e-04, 0.000000e00],
        [1.274803e-03, 4.895061e-04, 0.000000e00],
        [1.186238e-03, 4.555970e-04, 0.000000e00],
        [1.103871e-03, 4.240548e-04, 0.000000e00],
        [1.027194e-03, 3.946860e-04, 0.000000e00],
        [9.557493e-04, 3.673178e-04, 0.000000e00],
        [8.891262e-04, 3.417941e-04, 0.000000e00],
        [8.269535e-04, 3.179738e-04, 0.000000e00],
        [7.689351e-04, 2.957441e-04, 0.000000e00],
        [7.149425e-04, 2.750558e-04, 0.000000e00],
        [6.648590e-04, 2.558640e-04, 0.000000e00],
        [6.185421e-04, 2.381142e-04, 0.000000e00],
        [5.758303e-04, 2.217445e-04, 0.000000e00],
        [5.365046e-04, 2.066711e-04, 0.000000e00],
        [5.001842e-04, 1.927474e-04, 0.000000e00],
        [4.665005e-04, 1.798315e-04, 0.000000e00],
        [4.351386e-04, 1.678023e-04, 0.000000e00],
        [4.058303e-04, 1.565566e-04, 0.000000e00],
        [3.783733e-04, 1.460168e-04, 0.000000e00],
        [3.526892e-04, 1.361535e-04, 0.000000e00],
        [3.287199e-04, 1.269451e-04, 0.000000e00],
        [3.063998e-04, 1.183671e-04, 0.000000e00],
        [2.856577e-04, 1.103928e-04, 0.000000e00],
        [2.664108e-04, 1.029908e-04, 0.000000e00],
        [2.485462e-04, 9.611836e-05, 0.000000e00],
        [2.319529e-04, 8.973323e-05, 0.000000e00],
        [2.165300e-04, 8.379694e-05, 0.000000e00],
        [2.021853e-04, 7.827442e-05, 0.000000e00],
        [1.888338e-04, 7.313312e-05, 0.000000e00],
        [1.763935e-04, 6.834142e-05, 0.000000e00],
        [1.647895e-04, 6.387035e-05, 0.000000e00],
        [1.539542e-04, 5.969389e-05, 0.000000e00],
        [1.438270e-04, 5.578862e-05, 0.000000e00],
        [1.343572e-04, 5.213509e-05, 0.000000e00],
        [1.255141e-04, 4.872179e-05, 0.000000e00],
        [1.172706e-04, 4.553845e-05, 0.000000e00],
        [1.095983e-04, 4.257443e-05, 0.000000e00],
        [1.024685e-04, 3.981884e-05, 0.000000e00],
        [9.584715e-05, 3.725877e-05, 0.000000e00],
        [8.968316e-05, 3.487467e-05, 0.000000e00],
        [8.392734e-05, 3.264765e-05, 0.000000e00],
        [7.853708e-05, 3.056140e-05, 0.000000e00],
        [7.347551e-05, 2.860175e-05, 0.000000e00],
        [6.871576e-05, 2.675841e-05, 0.000000e00],
        [6.425257e-05, 2.502943e-05, 0.000000e00],
        [6.008292e-05, 2.341373e-05, 0.000000e00],
        [5.620098e-05, 2.190914e-05, 0.000000e00],
        [5.259870e-05, 2.051259e-05, 0.000000e00],
        [4.926279e-05, 1.921902e-05, 0.000000e00],
        [4.616623e-05, 1.801796e-05, 0.000000e00],
        [4.328212e-05, 1.689899e-05, 0.000000e00],
        [4.058715e-05, 1.585309e-05, 0.000000e00],
        [3.806114e-05, 1.487243e-05, 0.000000e00],
        [3.568818e-05, 1.395085e-05, 0.000000e00],
        [3.346023e-05, 1.308528e-05, 0.000000e00],
        [3.137090e-05, 1.227327e-05, 0.000000e00],
        [2.941371e-05, 1.151233e-05, 0.000000e00],
        [2.758222e-05, 1.080001e-05, 0.000000e00],
        [2.586951e-05, 1.013364e-05, 0.000000e00],
        [2.426701e-05, 9.509919e-06, 0.000000e00],
        [2.276639e-05, 8.925630e-06, 0.000000e00],
        [2.136009e-05, 8.377852e-06, 0.000000e00],
        [2.004122e-05, 7.863920e-06, 0.000000e00],
        [1.880380e-05, 7.381539e-06, 0.000000e00],
        [1.764358e-05, 6.929096e-06, 0.000000e00],
        [1.655671e-05, 6.505136e-06, 0.000000e00],
        [1.553939e-05, 6.108221e-06, 0.000000e00],
        [1.458792e-05, 5.736935e-06, 0.000000e00],
        [1.369853e-05, 5.389831e-06, 0.000000e00],
        [1.286705e-05, 5.065269e-06, 0.000000e00],
        [1.208947e-05, 4.761667e-06, 0.000000e00],
        [1.136207e-05, 4.477561e-06, 0.000000e00],
        [1.068141e-05, 4.211597e-06, 0.000000e00],
        [1.004411e-05, 3.962457e-06, 0.000000e00],
        [9.446399e-06, 3.728674e-06, 0.000000e00],
        [8.884754e-06, 3.508881e-06, 0.000000e00],
        [8.356050e-06, 3.301868e-06, 0.000000e00],
        [7.857521e-06, 3.106561e-06, 0.000000e00],
        [7.386996e-06, 2.922119e-06, 0.000000e00],
        [6.943576e-06, 2.748208e-06, 0.000000e00],
        [6.526548e-06, 2.584560e-06, 0.000000e00],
        [6.135087e-06, 2.430867e-06, 0.000000e00],
        [5.768284e-06, 2.286786e-06, 0.000000e00],
        [5.425069e-06, 2.151905e-06, 0.000000e00],
        [5.103974e-06, 2.025656e-06, 0.000000e00],
        [4.803525e-06, 1.907464e-06, 0.000000e00],
        [4.522350e-06, 1.796794e-06, 0.000000e00],
        [4.259166e-06, 1.693147e-06, 0.000000e00],
        [4.012715e-06, 1.596032e-06, 0.000000e00],
        [3.781597e-06, 1.504903e-06, 0.000000e00],
        [3.564496e-06, 1.419245e-06, 0.000000e00],
        [3.360236e-06, 1.338600e-06, 0.000000e00],
        [3.167765e-06, 1.262556e-06, 0.000000e00],
        [2.986206e-06, 1.190771e-06, 0.000000e00],
        [2.814999e-06, 1.123031e-06, 0.000000e00],
        [2.653663e-06, 1.059151e-06, 0.000000e00],
        [2.501725e-06, 9.989507e-07, 0.000000e00],
        [2.358723e-06, 9.422514e-07, 0.000000e00],
        [2.224206e-06, 8.888804e-07, 0.000000e00],
        [2.097737e-06, 8.386690e-07, 0.000000e00],
        [1.978894e-06, 7.914539e-07, 0.000000e00],
        [1.867268e-06, 7.470770e-07, 0.000000e00],
        [1.762465e-06, 7.053860e-07, 0.000000e00],
    ],
};

// D65: 6504K, 2ยบ: x = 0.31272, y = 0.32903; X = 95.047, Y = 100, Z = 108.883

/// The CIE D65 standard illuminant at one-nanometer resolution.
///
/// D65 represents daylight around noon. The data for this spectral power
/// distribution was sourced from the
/// [CIE](https://cie.co.at/datatable/cie-standard-illuminant-d65).
pub const CIE_ILLUMINANT_D65: Illuminant = Illuminant {
    label: "Illuminant D65",
    start: 300, // ..=830
    data: &[
        0.0341, 0.36014, 0.68618, 1.01222, 1.33826, 1.6643, 1.99034, 2.31638, 2.64242, 2.96846,
        3.2945, 4.98865, 6.6828, 8.37695, 10.0711, 11.7652, 13.4594, 15.1535, 16.8477, 18.5418,
        20.236, 21.9177, 23.5995, 25.2812, 26.963, 28.6447, 30.3265, 32.0082, 33.69, 35.3717,
        37.0535, 37.343, 37.6326, 37.9221, 38.2116, 38.5011, 38.7907, 39.0802, 39.3697, 39.6593,
        39.9488, 40.4451, 40.9414, 41.4377, 41.934, 42.4302, 42.9265, 43.4228, 43.9191, 44.4154,
        44.9117, 45.0844, 45.257, 45.4297, 45.6023, 45.775, 45.9477, 46.1203, 46.293, 46.4656,
        46.6383, 47.1834, 47.7285, 48.2735, 48.8186, 49.3637, 49.9088, 50.4539, 50.9989, 51.544,
        52.0891, 51.8777, 51.6664, 51.455, 51.2437, 51.0323, 50.8209, 50.6096, 50.3982, 50.1869,
        49.9755, 50.4428, 50.91, 51.3773, 51.8446, 52.3118, 52.7791, 53.2464, 53.7137, 54.1809,
        54.6482, 57.4589, 60.2695, 63.0802, 65.8909, 68.7015, 71.5122, 74.3229, 77.1336, 79.9442,
        82.7549, 83.628, 84.5011, 85.3742, 86.2473, 87.1204, 87.9936, 88.8667, 89.7398, 90.6129,
        91.486, 91.6806, 91.8752, 92.0697, 92.2643, 92.4589, 92.6535, 92.8481, 93.0426, 93.2372,
        93.4318, 92.7568, 92.0819, 91.4069, 90.732, 90.057, 89.3821, 88.7071, 88.0322, 87.3572,
        86.6823, 88.5006, 90.3188, 92.1371, 93.9554, 95.7736, 97.5919, 99.4102, 101.228, 103.047,
        104.865, 106.079, 107.294, 108.508, 109.722, 110.936, 112.151, 113.365, 114.579, 115.794,
        117.008, 117.088, 117.169, 117.249, 117.33, 117.41, 117.49, 117.571, 117.651, 117.732,
        117.812, 117.517, 117.222, 116.927, 116.632, 116.336, 116.041, 115.746, 115.451, 115.156,
        114.861, 114.967, 115.073, 115.18, 115.286, 115.392, 115.498, 115.604, 115.711, 115.817,
        115.923, 115.212, 114.501, 113.789, 113.078, 112.367, 111.656, 110.945, 110.233, 109.522,
        108.811, 108.865, 108.92, 108.974, 109.028, 109.082, 109.137, 109.191, 109.245, 109.3,
        109.354, 109.199, 109.044, 108.888, 108.733, 108.578, 108.423, 108.268, 108.112, 107.957,
        107.802, 107.501, 107.2, 106.898, 106.597, 106.296, 105.995, 105.694, 105.392, 105.091,
        104.79, 105.08, 105.37, 105.66, 105.95, 106.239, 106.529, 106.819, 107.109, 107.399,
        107.689, 107.361, 107.032, 106.704, 106.375, 106.047, 105.719, 105.39, 105.062, 104.733,
        104.405, 104.369, 104.333, 104.297, 104.261, 104.225, 104.19, 104.154, 104.118, 104.082,
        104.046, 103.641, 103.237, 102.832, 102.428, 102.023, 101.618, 101.214, 100.809, 100.405,
        100.0, 99.6334, 99.2668, 98.9003, 98.5337, 98.1671, 97.8005, 97.4339, 97.0674, 96.7008,
        96.3342, 96.2796, 96.225, 96.1703, 96.1157, 96.0611, 96.0065, 95.9519, 95.8972, 95.8426,
        95.788, 95.0778, 94.3675, 93.6573, 92.947, 92.2368, 91.5266, 90.8163, 90.1061, 89.3958,
        88.6856, 88.8177, 88.9497, 89.0818, 89.2138, 89.3459, 89.478, 89.61, 89.7421, 89.8741,
        90.0062, 89.9655, 89.9248, 89.8841, 89.8434, 89.8026, 89.7619, 89.7212, 89.6805, 89.6398,
        89.5991, 89.4091, 89.219, 89.029, 88.8389, 88.6489, 88.4589, 88.2688, 88.0788, 87.8887,
        87.6987, 87.2577, 86.8167, 86.3757, 85.9347, 85.4936, 85.0526, 84.6116, 84.1706, 83.7296,
        83.2886, 83.3297, 83.3707, 83.4118, 83.4528, 83.4939, 83.535, 83.576, 83.6171, 83.6581,
        83.6992, 83.332, 82.9647, 82.5975, 82.2302, 81.863, 81.4958, 81.1285, 80.7613, 80.394,
        80.0268, 80.0456, 80.0644, 80.0831, 80.1019, 80.1207, 80.1395, 80.1583, 80.177, 80.1958,
        80.2146, 80.4209, 80.6272, 80.8336, 81.0399, 81.2462, 81.4525, 81.6588, 81.8652, 82.0715,
        82.2778, 81.8784, 81.4791, 81.0797, 80.6804, 80.281, 79.8816, 79.4823, 79.0829, 78.6836,
        78.2842, 77.4279, 76.5716, 75.7153, 74.859, 74.0027, 73.1465, 72.2902, 71.4339, 70.5776,
        69.7213, 69.9101, 70.0989, 70.2876, 70.4764, 70.6652, 70.854, 71.0428, 71.2315, 71.4203,
        71.6091, 71.8831, 72.1571, 72.4311, 72.7051, 72.979, 73.253, 73.527, 73.801, 74.075,
        74.349, 73.0745, 71.8, 70.5255, 69.251, 67.9765, 66.702, 65.4275, 64.153, 62.8785, 61.604,
        62.4322, 63.2603, 64.0885, 64.9166, 65.7448, 66.573, 67.4011, 68.2293, 69.0574, 69.8856,
        70.4057, 70.9259, 71.446, 71.9662, 72.4863, 73.0064, 73.5266, 74.0467, 74.5669, 75.087,
        73.9376, 72.7881, 71.6387, 70.4893, 69.3398, 68.1904, 67.041, 65.8916, 64.7421, 63.5927,
        61.8752, 60.1578, 58.4403, 56.7229, 55.0054, 53.288, 51.5705, 49.8531, 48.1356, 46.4182,
        48.4569, 50.4956, 52.5344, 54.5731, 56.6118, 58.6505, 60.6892, 62.728, 64.7667, 66.8054,
        66.4631, 66.1209, 65.7786, 65.4364, 65.0941, 64.7518, 64.4096, 64.0673, 63.7251, 63.3828,
        63.4749, 63.567, 63.6592, 63.7513, 63.8434, 63.9355, 64.0276, 64.1198, 64.2119, 64.304,
        63.8188, 63.3336, 62.8484, 62.3632, 61.8779, 61.3927, 60.9075, 60.4223, 59.9371, 59.4519,
        58.7026, 57.9533, 57.204, 56.4547, 55.7054, 54.9562, 54.2069, 53.4576, 52.7083, 51.959,
        52.5072, 53.0553, 53.6035, 54.1516, 54.6998, 55.248, 55.7961, 56.3443, 56.8924, 57.4406,
        57.7278, 58.015, 58.3022, 58.5894, 58.8765, 59.1637, 59.4509, 59.7381, 60.0253, 60.3125,
    ],
};
